head	1.3;
access;
symbols
	start:1.1.1.1 tg:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2005.12.14.02.09.41;	author tg;	state Exp;
branches;
next	1.2;
commitid	0439f7edee492750;

1.2
date	2005.12.13.22.18.55;	author tg;	state Exp;
branches;
next	1.1;
commitid	0439f48ca142fd18;

1.1
date	2005.12.13.20.44.46;	author tg;	state Exp;
branches
	1.1.1.1;
next	;
commitid	0439f32c6884c25e;

1.1.1.1
date	2005.12.13.20.44.46;	author tg;	state Exp;
branches;
next	;
commitid	0439f32c6884c25e;


desc
@@


1.3
log
@Add support for the IPv6 transport module to communicate,
as a client, with IPv4 transport name servers as well.

WFM
@
text
@$MirOS: ports/net/djbdns/patches/patch-src_dns_transmit_c,v 1.1.201.1 2005/05/14 23:21:02 tg Exp $
--- src/dns_transmit.c.orig	Sun Feb 11 21:11:23 2001
+++ src/dns_transmit.c	Wed Dec 14 01:59:28 2005
@@@@ -1,3 +1,28 @@@@
+/*-
+ * Some changes Copyright (c) 2005
+ *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
+ *
+ * Licensee is hereby permitted to deal in this work without restric-
+ * tion, including unlimited rights to use, publicly perform, modify,
+ * merge, distribute, sell, give away or sublicence, provided all co-
+ * pyright notices above, these terms and the disclaimer are retained
+ * in all redistributions or reproduced in accompanying documentation
+ * or other materials provided with binary redistributions.
+ *
+ * All advertising materials mentioning features or use of this soft-
+ * ware must display the following acknowledgement:
+ *	This product includes material provided by Thorsten Glaser.
+ *
+ * Licensor offers the work "AS IS" and WITHOUT WARRANTY of any kind,
+ * express, or implied, to the maximum extent permitted by applicable
+ * law, without malicious intent or gross negligence; in no event may
+ * licensor, an author or contributor be held liable for any indirect
+ * or other damage, or direct damage except proven a consequence of a
+ * direct error of said person and intended use of this work, loss or
+ * other issues arising in any way out of its use, even if advised of
+ * the possibility of such damage or existence of a nontrivial bug.
+ */
+
 #include <sys/types.h>
 #include <sys/socket.h>
 #include <unistd.h>
@@@@ -7,7 +32,18 @@@@
 #include "byte.h"
 #include "uint16.h"
 #include "dns.h"
+#ifdef DJB_V6ONLY
+#include "ip6.h"
+#endif /* DJB_V6ONLY */
 
+#ifdef DJB_V6ONLY
+static int callv4 = 0;
+static int callv4ofs = 12;
+#else
+static int callv4 = 1;
+static int callv4ofs = 0;
+#endif /* DJB_V6ONLY */
+
 static int serverwantstcp(const char *buf,unsigned int len)
 {
   char out[12];
@@@@ -83,11 +119,26 @@@@ void dns_transmit_free(struct dns_transm
 static int randombind(struct dns_transmit *d)
 {
   int j;
+  char localip[16];
 
+  byte_copy(localip,16,d->localip);
+
+#ifdef DJB_V6ONLY
+  /*
+   * If we are calling an IPv4 server from an IPv6-transport tool,
+   * we probably bind ourselves to an IPv6 socket (d'uh), so, in
+   * the IPv4 case use INADDR_ANY as local bind address instead.
+   */
+  if (callv4)
+    byte_zero(localip,4);
+#endif /* DJB_V6ONLY */
+
   for (j = 0;j < 10;++j)
-    if (socket_bind4(d->s1 - 1,d->localip,1025 + dns_random(64510)) == 0)
+    if ((callv4 ? socket_bind4(d->s1 - 1,localip,1025 + dns_random(64510))
+     : socket_bind6(d->s1 - 1,localip,1025 + dns_random(64510),d->scope_id)) == 0)
       return 0;
-  if (socket_bind4(d->s1 - 1,d->localip,0) == 0)
+  if ((callv4 ? socket_bind4(d->s1 - 1,localip,0)
+   : socket_bind6(d->s1 - 1,localip,0,d->scope_id)) == 0)
     return 0;
   return -1;
 }
@@@@ -102,16 +153,26 @@@@ static int thisudp(struct dns_transmit *
 
   while (d->udploop < 4) {
     for (;d->curserver < 16;++d->curserver) {
+#ifndef DJB_V6ONLY
       ip = d->servers + 4 * d->curserver;
       if (byte_diff(ip,4,"\0\0\0\0")) {
+#else
+      ip = d->servers + 16 * d->curserver;
+      if (byte_diff(ip,16,V6any)) {
+	if (byte_equal(ip,12,V4mappedprefix))
+	  callv4 = 1;
+	else
+	  callv4 = 0;
+#endif /* DJB_V6ONLY */
 	d->query[2] = dns_random(256);
 	d->query[3] = dns_random(256);
   
-        d->s1 = 1 + socket_udp();
+        d->s1 = 1 + (callv4 ? socket_udp() : socket_udp6());
         if (!d->s1) { dns_transmit_free(d); return -1; }
 	if (randombind(d) == -1) { dns_transmit_free(d); return -1; }
 
-        if (socket_connect4(d->s1 - 1,ip,53) == 0)
+	if ((callv4 ? socket_connect4(d->s1 - 1,ip + callv4ofs,53)
+	 : socket_connect6(d->s1 - 1,ip,53,d->scope_id)) == 0)
           if (send(d->s1 - 1,d->query + 2,d->querylen - 2,0) == d->querylen - 2) {
             struct taia now;
             taia_now(&now);
@@@@ -153,19 +214,29 @@@@ static int thistcp(struct dns_transmit *
   packetfree(d);
 
   for (;d->curserver < 16;++d->curserver) {
+#ifndef DJB_V6ONLY
     ip = d->servers + 4 * d->curserver;
     if (byte_diff(ip,4,"\0\0\0\0")) {
+#else
+    ip = d->servers + 16 * d->curserver;
+    if (byte_diff(ip,16,V6any)) {
+      if (byte_equal(ip,12,V4mappedprefix))
+	callv4 = 1;
+      else
+	callv4 = 0;
+#endif /* DJB_V6ONLY */
       d->query[2] = dns_random(256);
       d->query[3] = dns_random(256);
 
-      d->s1 = 1 + socket_tcp();
+      d->s1 = 1 + (callv4 ? socket_tcp() : socket_tcp6());
       if (!d->s1) { dns_transmit_free(d); return -1; }
       if (randombind(d) == -1) { dns_transmit_free(d); return -1; }
   
       taia_now(&now);
       taia_uint(&d->deadline,10);
       taia_add(&d->deadline,&d->deadline,&now);
-      if (socket_connect4(d->s1 - 1,ip,53) == 0) {
+      if ((callv4 ? socket_connect4(d->s1 - 1,ip + callv4ofs,53)
+       : socket_connect6(d->s1 - 1,ip,53,d->scope_id)) == 0) {
         d->tcpstate = 2;
         return 0;
       }
@@@@ -193,7 +264,11 @@@@ static int nexttcp(struct dns_transmit *
   return thistcp(d);
 }
 
+#ifndef DJB_V6ONLY
 int dns_transmit_start(struct dns_transmit *d,const char servers[64],int flagrecursive,const char *q,const char qtype[2],const char localip[4])
+#else
+int dns_transmit_start(struct dns_transmit *d,const char servers[256],int flagrecursive,const char *q,const char qtype[2],const char localip[16])
+#endif /* DJB_V6ONLY */
 {
   unsigned int len;
 
@@@@ -213,7 +288,11 @@@@ int dns_transmit_start(struct dns_transm
 
   byte_copy(d->qtype,2,qtype);
   d->servers = servers;
+#ifndef DJB_V6ONLY
   byte_copy(d->localip,4,localip);
+#else
+  byte_copy(d->localip,16,localip);
+#endif /* DJB_V6ONLY */
 
   d->udploop = flagrecursive ? 1 : 0;
 
@


1.2
log
@* update to fefe's djbdns-1.05-test23.diff
  with djbdns-1.05-ixfr.diff
* slightly change naming of v6-transport binaries
@
text
@d3 31
a33 2
+++ src/dns_transmit.c	Tue Dec 13 21:44:20 2005
@@@@ -7,6 +7,9 @@@@
d41 8
d51 4
a54 1
@@@@ -85,9 +88,17 @@@@ static int randombind(struct dns_transmi
d56 1
d58 12
d71 3
a73 5
+#ifndef DJB_V6ONLY
     if (socket_bind4(d->s1 - 1,d->localip,1025 + dns_random(64510)) == 0)
+#else
+    if (socket_bind6(d->s1 - 1,d->localip,1025 + dns_random(64510),d->scope_id) == 0)
+#endif /* DJB_V6ONLY */
d75 3
a77 5
+#ifndef DJB_V6ONLY
   if (socket_bind4(d->s1 - 1,d->localip,0) == 0)
+#else
+  if (socket_bind6(d->s1 - 1,d->localip,0,d->scope_id) == 0)
+#endif /* DJB_V6ONLY */
d81 1
a81 1
@@@@ -102,16 +113,29 @@@@ static int thisudp(struct dns_transmit *
d91 4
d99 2
a100 5
+#ifndef DJB_V6ONLY
         d->s1 = 1 + socket_udp();
+#else
+        d->s1 = 1 + socket_udp6();
+#endif /* DJB_V6ONLY */
d104 3
a106 5
+#ifndef DJB_V6ONLY
         if (socket_connect4(d->s1 - 1,ip,53) == 0)
+#else
+        if (socket_connect6(d->s1 - 1,ip,53,d->scope_id) == 0)
+#endif /* DJB_V6ONLY */
d110 1
a110 1
@@@@ -153,19 +177,32 @@@@ static int thistcp(struct dns_transmit *
d120 4
d128 2
a129 5
+#ifndef DJB_V6ONLY
       d->s1 = 1 + socket_tcp();
+#else
+      d->s1 = 1 + socket_tcp6();
+#endif /* DJB_V6ONLY */
d136 3
a138 5
+#ifndef DJB_V6ONLY
       if (socket_connect4(d->s1 - 1,ip,53) == 0) {
+#else
+      if (socket_connect6(d->s1 - 1,ip,53,d->scope_id) == 0) {
+#endif /* DJB_V6ONLY */
d142 1
a142 1
@@@@ -193,7 +230,11 @@@@ static int nexttcp(struct dns_transmit *
d154 1
a154 1
@@@@ -213,7 +254,11 @@@@ int dns_transmit_start(struct dns_transm
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
+++ src/dns_transmit.c	Sat May 14 22:27:17 2005
@


1.1.1.1
log
@Import ports/net/djbdns of snapshot
@
text
@@
