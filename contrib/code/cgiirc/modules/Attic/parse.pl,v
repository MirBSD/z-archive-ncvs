head	2.3;
access;
symbols
	cgiirc-0_5_5:1.1.3.2
	cgiirc-0_5_4:1.1.3.1
	tg:1.1.3;
locks; strict;
comment	@# @;


2.3
date	2005.01.18.20.26.31;	author tg;	state dead;
branches;
next	2.2;

2.2
date	2005.01.18.20.12.41;	author tg;	state Exp;
branches;
next	2.1;

2.1
date	2004.12.19.14.29.17;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.19.14.26.30;	author tg;	state Exp;
branches
	1.1.3.1;
next	;

1.1.3.1
date	2004.12.19.14.26.30;	author tg;	state Exp;
branches;
next	1.1.3.2;

1.1.3.2
date	2005.01.18.20.03.58;	author tg;	state Exp;
branches;
next	;


desc
@@


2.3
log
@nah, doesnt work like I would
@
text
@# $MirBSD: contrib/code/cgiirc/modules/parse.pl,v 2.2 2005/01/18 20:12:41 tg Exp $
#
# Copyright (c) 2004 Thorsten Glaser.
# This file is licenced under the GNU GPL, Version 2.

#### Parsing Functions

## Reads a config file from the filename passed to it, returns a reference to
## a hash containing the name=value pairs in the file.
sub parse_config {
   my %config;
   open(CONFIG, "<$_[0]") or error("Opening config file '$_[0]': $!");
   while(<CONFIG>) {
      s/(\015\012|\012)$//; # Be forgiving for poor windows users
      next if /^\s*[#;]/; # Comments
      next if !/=/;

      my($key,$value) = split(/\s*=\s*/, $_, 2);
      $config{$key} = defined $value ? $value : '';
   }
   close(CONFIG);
   return \%config;
}

sub make_utf8 {
	# Use perl's unicode support assuming we have 5.6 and Encode
	return pack("U", hex($_[0])) if $] >= 5.006 && $INC{'Encode.pm'};
	# From http://www1.tip.nl/~t876506/utf8tbl.html
   my $chr = unpack("n", pack("H*", shift));
   return chr $chr if $chr < 0x7F;
   return chr(192 + int($chr / 64)) . chr(128 + $chr % 64) if $chr <= 0x7FF;
   return chr(224 + int($chr / 4096)) . chr(128 + int($chr / 64) % 64) .
      chr(128 + $chr % 64) if $chr <= 0xFFFF;
   return chr(240 + int($chr / 262144)) . chr(128 + int($chr / 4096) % 64) .
      chr(128 + int($chr / 64) % 64) . chr(128 + $chr % 64) if $chr <= 0x1FFFFF;
   return "";
}

## Parses a CGI input, returns a hash reference to the value within it.
## The clever regexp bit is from cgi-lib.pl
## This now also removes certain characters that might not be a good idea.
## $ext (bitmask): 1 to *NOT* remove \n etc, 2 to treat input as xmlhttp
## (different encoding for +).
sub parse_query {
   my($query, $ext) = @@_;
   return {} unless defined $query and length $query;

   return {
	  map {
	     s/\+/ /g unless defined $ext and $ext & 2;
	     my($key, $val) = split(/=/,$_,2);
	     $val = "" unless defined $val;

	     $key =~ s/%([A-Fa-f0-9]{2})/pack("c",hex($1))/ge;
	     $key =~ s/[\r\n\0\001]//g;

	     $val =~ s/\%u([A-F0-9]{4})/make_utf8($1)/ge;
	     $val =~ s{%([A-Fa-f0-9]{2})((?=%[A-Fa-f0-9]{2}))?}{
	        my $x = hex($1);
		
		if($x >= 0x7F &&
		    (not defined $2 || (defined $2 && hex($2) < 0x7F))) {
		   make_utf8("00$1");
		}else{
		  pack("C",hex($1))
		}
             }gex;
        if(defined $ext and $ext & 1) {
           $val =~ s/[\0\001]//g;
        }else{
           $val =~ s/[\r\n\0\001]//g;
        }

	     $key => $val; # Return a hash element to map.
      } split(/[&;]/, $query)
   };
}

sub parse_cookie {
   if(exists $ENV{HTTP_COOKIE} && $ENV{HTTP_COOKIE} =~ /cgiircauth/) {
	  for(split /;/, $ENV{HTTP_COOKIE}) {
		 s/^\s+//;
		 my($name,$value) = split(/=/,$_,2);
		 return $value if $name eq "cgiircauth";
	  }
   }
   return 0;
}

sub parse_interface_cookie {
   my %tmp = ( );
   if(exists $ENV{HTTP_COOKIE} && $ENV{HTTP_COOKIE} =~ /cgiirc/) {
      for(split /;/, $ENV{HTTP_COOKIE}) {
         s/^\s+//;
         my($name,$value) = split(/=/,$_,2);
         next if $name =~ /[^a-z]/i;
         next unless $name =~ s/^cgiirc//;
         next if $name eq 'auth';
         $tmp{$name} = $value;
      }
   }
   return \%tmp;
}

sub escape_html {
   my($html) = @@_;
   $html =~ s/&/&amp;/g;
   $html =~ s/>/&gt;/g;
   $html =~ s/</&lt;/g;
   $html =~ s/"/&quot;/g;
   return $html;
}

1;
@


2.2
log
@merge
@
text
@d1 1
a1 1
# $MirBSD: contrib/code/cgiirc/modules/parse.pl,v 2.1 2004/12/19 14:29:17 tg Exp $
@


2.1
log
@*sigh* update to MirCGIIRC
@
text
@d1 1
a1 1
# $MirBSD: contrib/code/cgiirc/modules/parse.pl,v 1.4 2004/11/02 08:50:47 tg Exp $
d14 1
a14 1
	  s/(\015\012|\012)$//; # Be forgiving for poor windows users
d25 14
d42 2
d45 1
a45 1
   my($query, $allow) = @@_;
d50 1
a50 1
	     s/\+/ /g;
d52 1
a52 1
        $val = "" unless defined $val;
d55 14
a68 4
        $key =~ s/[\r\n\0\001]//g;
	     $val =~ s/%u([A-Fa-f0-9]{4})/pack("U",hex($1))/ge;
	     $val =~ s/%([A-Fa-f0-9]{2})/pack("U",hex("00".$1))/ge;
        if(defined $allow and $allow) {
@


1.1
log
@Initial revision
@
text
@d1 5
d40 2
a41 1
	     $val =~ s/%([A-Fa-f0-9]{2})/pack("c",hex($1))/ge;
@


1.1.3.1
log
@Import cgiirc 0.5.4 (pristine) again
@
text
@@


1.1.3.2
log
@there's a new CGI::IRC out, with utf-8 supposedly, and fireschrott bugfixes
@
text
@d9 1
a9 1
      s/(\015\012|\012)$//; # Be forgiving for poor windows users
a19 14
sub make_utf8 {
	# Use perl's unicode support assuming we have 5.6 and Encode
	return pack("U", hex($_[0])) if $] >= 5.006 && $INC{'Encode.pm'};
	# From http://www1.tip.nl/~t876506/utf8tbl.html
   my $chr = unpack("n", pack("H*", shift));
   return chr $chr if $chr < 0x7F;
   return chr(192 + int($chr / 64)) . chr(128 + $chr % 64) if $chr <= 0x7FF;
   return chr(224 + int($chr / 4096)) . chr(128 + int($chr / 64) % 64) .
      chr(128 + $chr % 64) if $chr <= 0xFFFF;
   return chr(240 + int($chr / 262144)) . chr(128 + int($chr / 4096) % 64) .
      chr(128 + int($chr / 64) % 64) . chr(128 + $chr % 64) if $chr <= 0x1FFFFF;
   return "";
}

a22 2
## $ext (bitmask): 1 to *NOT* remove \n etc, 2 to treat input as xmlhttp
## (different encoding for +).
d24 1
a24 1
   my($query, $ext) = @@_;
d29 1
a29 1
	     s/\+/ /g unless defined $ext and $ext & 2;
d31 1
a31 1
	     $val = "" unless defined $val;
d34 3
a36 14
	     $key =~ s/[\r\n\0\001]//g;

	     $val =~ s/\%u([A-F0-9]{4})/make_utf8($1)/ge;
	     $val =~ s{%([A-Fa-f0-9]{2})((?=%[A-Fa-f0-9]{2}))?}{
	        my $x = hex($1);
		
		if($x >= 0x7F &&
		    (not defined $2 || (defined $2 && hex($2) < 0x7F))) {
		   make_utf8("00$1");
		}else{
		  pack("C",hex($1))
		}
             }gex;
        if(defined $ext and $ext & 1) {
@

