head	1.10;
access;
symbols
	libtool-1_5_10:1.1.2.3
	libtool-1_5_8:1.1.2.3
	MIRLIBTOOL_I:1.7
	LIBTOOL_1_5:1.5.0.4
	libtool-1_5-20040215:1.1.2.2
	LIBTOOL_1_4:1.5.0.2
	libtool-1_4_3:1.1.2.1
	FSF:1.1.2;
locks; strict;
comment	@# @;


1.10
date	2004.08.10.01.18.01;	author tg;	state Stab;
branches;
next	1.9;

1.9
date	2004.08.09.23.59.02;	author tg;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.09.23.06.49;	author tg;	state Exp;
branches;
next	1.7;

1.7
date	2004.02.16.12.30.40;	author tg;	state Exp;
branches;
next	1.6;

1.6
date	2004.02.16.12.26.13;	author tg;	state Exp;
branches;
next	1.5;

1.5
date	2004.02.15.00.24.29;	author tg;	state Exp;
branches
	1.5.4.1;
next	1.4;

1.4
date	2004.02.15.00.10.11;	author tg;	state Exp;
branches;
next	1.3;

1.3
date	2004.02.07.23.04.26;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.03.19.41.19;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.02.03.17.55.35;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2004.02.03.17.55.35;	author tg;	state Exp;
branches;
next	1.1.2.2;

1.1.2.2
date	2004.02.15.13.09.41;	author tg;	state Exp;
branches;
next	1.1.2.3;

1.1.2.3
date	2004.08.09.22.58.45;	author tg;	state Exp;
branches;
next	;

1.5.4.1
date	2004.02.15.13.30.25;	author tg;	state Exp;
branches;
next	;


desc
@@


1.10
log
@fix final stuff; regenerate
@
text
@# $MirBSD: contrib/gnu/libtool/Makefile.am,v 1.9 2004/08/09 23:59:02 tg Exp $

## Process this file with automake to produce Makefile.in

AUTOMAKE_OPTIONS = 1.3e gnu

BUILD_SUBDIRS = .
CONF_SUBDIRS = @@CONF_SUBDIRS@@
SUBDIRS = $(BUILD_SUBDIRS)
DIST_SUBDIRS = $(BUILD_SUBDIRS) $(CONF_SUBDIRS)

# We need to export these variables
CFLAGS = @@CFLAGS@@
CPPLAGS = @@CPPFLAGS@@
LDFLAGS = @@LDFLAGS@@
LIBS= @@LIBS@@
FFLAGS = @@FFLAGS@@
FLIBS = @@FLIBS@@

aclocal_macros = libtool.m4

EXTRA_DIST = $(aclocal_macros) bootstrap libtoolize.in ltmain.in
CLEANFILES = libtool libtoolize ltmain.shT

# These are required by libtoolize and must be executable when installed.
# Since _SCRIPTS gets the program transform applied we make them
# executable by hand
pkgdata_DATA = config.guess config.sub ltmain.sh

# The standalone libtool script, and the libtool distributor.
bin_SCRIPTS = libtool libtoolize

libtool: $(srcdir)/ltmain.sh $(top_builddir)/configure.ac
	$(SHELL) $(top_builddir)/config.status --recheck
	chmod +x $@@

libtoolize: $(srcdir)/libtoolize.in $(top_builddir)/config.status
	CONFIG_FILES=$@@ CONFIG_HEADERS= $(SHELL) $(top_builddir)/config.status
	chmod +x $@@

$(srcdir)/ltmain.sh: $(srcdir)/ltmain.in $(TSDEPS)
	-rm -f ltmain.shT
	date=" (MirLibtool-1.5 $$(date '+%Y/%m/%d %H:%M:%S'))" && \
	sed -e 's/@@''PACKAGE@@/@@PACKAGE@@/' -e 's/@@''VERSION@@/@@VERSION@@/' \
	    -e "s%@@""TIMESTAMP@@%$$date%" $(srcdir)/ltmain.in > ltmain.shT
	mv -f ltmain.shT $@@ || \
	(rm -f $@@ && cp ltmain.shT $@@ && rm -f ltmain.shT)

# All our rules should depend on these demo files.
all-recursive: $(ACINCLUDE_M4_LIST)

@@ACINCLUDE_M4_LIST@@: $(srcdir)/libtool.m4
	-rm -f $@@ $@@T
	cat $(srcdir)/libtool.m4 > $@@T
	mv $@@T $@@
@


1.9
log
@basic adaptions
@
text
@d1 1
a1 1
# $MirBSD$
a28 3

# This macro file should be visible to Automake's aclocal.
aclocal_DATA = $(aclocal_macros)
@


1.8
log
@bring everything to (stock) libtool 1.5.8
@
text
@d1 2
d7 1
a7 1
BUILD_SUBDIRS = . libltdl doc tests
d20 1
a20 1
aclocal_macros = libtool.m4 ltdl.m4
d22 1
a22 2
EXTRA_DIST = $(aclocal_macros) bootstrap libtoolize.in ltmain.in \
	mkstamp ChangeLog.0 ChangeLog.1
d46 1
a46 1
	date=`$(SHELL) $(srcdir)/mkstamp < $(srcdir)/ChangeLog` && \
a50 1
	cp $@@ $(srcdir)/libltdl/
d53 1
a53 6
all-recursive: $(srcdir)/libltdl/acinclude.m4 $(ACINCLUDE_M4_LIST)

@@srcdir@@/libltdl/acinclude.m4: $(srcdir)/libtool.m4 $(srcdir)/ltdl.m4
	-rm -f $@@ $@@T
	cat $(srcdir)/libtool.m4 $(srcdir)/ltdl.m4 > $@@T
	mv $@@T $@@
a58 209

.PHONY: configure-subdirs
configure-subdirs distdir: $(DIST_MAKEFILE_LIST)
@@DIST_MAKEFILE_LIST@@:
	dir=`echo $@@ | sed 's,^[^/]*$$,.,;s,/[^/]*$$,,'`; \
	test -d $$dir || mkdir $$dir || exit 1; \
	abs_srcdir=`cd $(top_srcdir) && pwd`; \
	(cd $$dir && $$abs_srcdir/$$dir/configure) || exit 1

# Create and install libltdl
install-data-hook:
	cd libltdl && $(MAKE) local-install-files
	chmod +x $(DESTDIR)$(pkgdatadir)/config.guess
	chmod +x $(DESTDIR)$(pkgdatadir)/config.sub

# Uninstall libltdl
uninstall-local:
	-rm -rf $(DESTDIR)$(pkgdatadir)/libltdl


## ---------------------------------------------------------------- ##
##  Everything past here is useful to the maintainer, but probably  ##
##  not to anybody else (inspiration from automake/Makefile.am).    ##
## ---------------------------------------------------------------- ##

TEXI2HTML = texi2html

.PHONY: cvs-release
cvs-release: version-check prev-tarball cvs-news fetch cvs-commit cvs-dist deltas web-manual
	@@tarname="$(PACKAGE)-$(VERSION).tar.gz"; \
	diffname="$(PACKAGE)-$(LASTRELEASE)-$(VERSION).diff.gz"; \
	xdeltaname="$(PACKAGE)-$(LASTRELEASE)-$(VERSION).xdelta"; \
	echo " *** Upload $$tarname, $$tarname.sig,";\
	echo " *** $$tarname.directive.asc, $$diffname,"; \
	echo " *** $$diffname.sig, $$diffname.directive.asc,"; \
	echo " *** $$xdeltaname, $$xdeltaname.sig and";\
	echo " *** $$xdeltaname.directive.asc to either"
	echo " *** /incoming/alpha or /incoming/ftp on ftp-upload.gnu.org."
	echo " *** You might need to upload manual.html to webcvs/libtool."

.PHONY: version-check
version-check:
	@@case $(VERSION) in \
	*[acegikmoqsuwy]) \
	  echo "Version \`$(VERSION)' is not a releasable version, please read:"; \
	  echo "    http://www.gnu.org/software/libtool/contribute.html"; \
	  exit 1; \
	  ;; \
	esac

.PHONY: prev-tarball
prev-tarball:
## Make sure we have the previous release tarball in the tree.
	@@if test -z "$(LASTRELEASE)"; \
		then echo "LASTRELEASE is not set"; exit 1; fi
	@@ofile="$(PACKAGE)-$(LASTRELEASE).tar.gz"; \
	if test -f $$ofile; then :; \
	else echo "Cannot make deltas without $$ofile"; exit 1; fi

# TSDEPS will be defined to TSDEPS_DIST at `make dist' time
TSDEPS =
TSDEPS_DIST = ChangeLog libtool.m4
CVS = cvs # set it to `:' to avoid CVS operations

.PHONY: timestamps update-timestamps
timestamps: update-timestamps
update-timestamps:
	@@if (cd $(srcdir) && test -d CVS && \
	    $(CVS) -n update $(TSDEPS_DIST) | grep '^M'); then \
		echo "Cannot make cvs-dist before commit"; exit 1; else :; fi


.PHONY: cvs-news
cvs-news:
## Make sure the NEWS file is up-to-date:
	@@if sed '1,2d;3q' $(srcdir)/NEWS | grep -e "$(VERSION)" >/dev/null; \
	then :; \
	else \
	  echo "NEWS not updated; not releasing" 1>&2; \
	  exit 1; \
	fi

## Program to use to fetch files.
WGET = wget
WGETSGO = $(WGET) http://savannah.gnu.org/cgi-bin/viewcvs/~checkout~

## Files that we fetch and which we compare against.
## FIXME should be a lot more here
FETCHFILES = \
./INSTALL \
./config.guess \
libltdl/config.guess \
./config.sub \
libltdl/config.sub \
doc/texinfo.tex

## Fetch the latest versions of files we care about.
.PHONY: fetch
fetch:
	rm -rf Fetchdir > /dev/null 2>&1
	mkdir Fetchdir
## If a get fails then that is a problem.
	(cd Fetchdir && \
	$(WGETSGO)/autoconf/autoconf/INSTALL; \
	$(WGETSGO)/config/config/config.guess; \
	$(WGETSGO)/config/config/config.sub; \
	$(WGETSGO)/texinfo/texinfo/doc/texinfo.tex )
## Don't exit after test because we want to give as many errors as
## possible.
	@@stat=0; for file in $(FETCHFILES); do \
	  fetchedfile=Fetchdir/`echo $$file | sed 's,.*/,,g'`; \
	  if diff -u $(srcdir)/$$file $$fetchedfile \
	    >>Fetchdir/update.patch 2>/dev/null; then :; \
	  else \
	    stat=1; \
	    echo "Updating $(srcdir)/$$file..."; \
	    cp $$fetchedfile $(srcdir)/$$file; \
	  fi; \
	done; \
	test $$stat = 1 && \
	  echo "See Fetchdir/update.patch for a log of the changes."; \
	exit $$stat


GPG = gpg # set it to `:' to avoid gpg operations

.PHONY: cvs-commit
cvs-commit: cvs-news
	cd $(srcdir) && $(SHELL) ./commit

.PHONY: cvs-dist
cvs-dist: cvs-news timestamps
## Build the distribution:
	$(MAKE) distcheck
## Finally, if everything was successful, tag the release
	cd $(srcdir) \
	  && $(CVS) -q tag -c `echo "release-$(VERSION)" | sed 's/\./-/g'`
## Generate signatures and directives for FSF ftp-upload:
	ofile="$(PACKAGE)-$(VERSION).tar.gz"; \
	$(GPG) --detach-sign $$ofile \
	&& echo "directory: libtool" > $$ofile.directive \
	&& $(GPG) --clearsign $$ofile.directive \
	&& rm -f $$ofile.directive

.PHONY: new-tarball
new-tarball:
## Make sure we have the new release tarball in the tree.
	@@ofile="$(PACKAGE)-$(VERSION).tar.gz"; \
	if test -f $$ofile; then :; \
	else echo "Cannot make deltas without $$ofile"; exit 1; fi

.PHONY: got-xdelta
got-xdelta:
## Make sure xdelta exists;
	@@if ($(XDELTA) --version 2>&1 | grep version)>/dev/null 2>/dev/null; \
	then :;\
	else \
	  echo "Get xdelta from http://sourceforge.net/projects/xdelta."; \
	  exit 1; \
	fi

.PHONY: deltas
deltas: delta-diff delta-xdelta

DIFF = diff
DIFF_OPTIONS = -ruNp

.PHONY: delta-diff
delta-diff: prev-tarball new-tarball
## Unpack the tarballs somewhere to diff them
	rm -rf delta-diff
	mkdir delta-diff
	ofile="../$(PACKAGE)-$(LASTRELEASE)-$(VERSION).diff.gz"; \
	cd delta-diff \
	&& tar xzf "../$(PACKAGE)-$(LASTRELEASE).tar.gz" \
	&& tar xzf "../$(PACKAGE)-$(VERSION).tar.gz" \
	&& $(DIFF) $(DIFF_OPTIONS) \
		$(PACKAGE)-$(LASTRELEASE) $(PACKAGE)-$(VERSION) \
		| GZIP=$(GZIP_ENV) gzip -c > $$ofile \
	&& $(GPG) --detach-sign $$ofile \
	&& echo "directory: libtool" > $$ofile.directive \
	&& $(GPG) --clearsign $$ofile.directive \
	&& rm -f $$ofile.directive
	rm -rf delta-diff

XDELTA = xdelta
XDELTA_OPTIONS = -9

.PHONY: delta-xdelta
delta-xdelta: prev-tarball new-tarball got-xdelta
## Generate the delta file (xdelta has wierd exit statuses, so we need to
## add some shell code to keep make happy), and then generate the signatures
## for FSF ftp-upload:
	ofile="$(PACKAGE)-$(LASTRELEASE)-$(VERSION).xdelta"; \
	( test -z `$(XDELTA) delta $(XDELTA_OPTIONS) \
	    $(PACKAGE)-$(LASTRELEASE).tar.gz $(PACKAGE)-$(VERSION).tar.gz \
	    $$ofile 2>&1` \
	  && : ) \
	&& $(GPG) --detach-sign $$ofile \
	&& echo "directory: libtool" > $$ofile.directive \
	&& $(GPG) --clearsign $$ofile.directive \
	&& rm -f $$ofile.directive

.PHONY: web-manual
web-manual:
	@@$(LN_S) $(top_srcdir)/doc/libtool.texi doc/manual.texi
	$(TEXI2HTML) -I doc -monolithic -number -verbose doc/manual.texi
	@@mv doc/manual.html manual.html
	@@rm -f doc/manual.texi
@


1.7
log
@there were some bugs, actually
@
text
@d5 2
a6 1
BUILD_SUBDIRS = .
a9 2
# $MirBSD$

d15 2
d18 1
a18 1
aclocal_macros = libtool.m4
d20 2
a21 1
EXTRA_DIST = $(aclocal_macros) bootstrap libtoolize.in ltmain.in
d24 7
a30 3
# These are required by libtoolize.
pkgdata_SCRIPTS = config.guess config.sub
pkgdata_DATA = ltmain.sh
d35 1
a35 1
libtool: $(srcdir)/ltmain.sh $(top_builddir)/configure.in
d45 1
a45 1
	date=" (MirLibtool-1.4 $$(date '+%Y/%m/%d %H:%M:%S'))" && \
d50 1
d53 6
a58 1
all-recursive: $(ACINCLUDE_M4_LIST)
d64 209
@


1.6
log
@simplify and correct
nuke junk
nuke generated junk
@
text
@d9 2
d39 1
a39 1
	date=" (MirLibtool-1.4 $(date '+%Y/%m/%d %H:%M:%S')" && \
@


1.5
log
@give libtoolize a chance to have a different location for libtool.m4
@
text
@a42 12
# TSDEPS will be defined to TSDEPS_DIST at `make dist' time
TSDEPS =
TSDEPS_DIST = libtool.m4
CVS = : # CVS # set it to `:' to avoid CVS operations

.PHONY: timestamps update-timestamps
timestamps distdir: update-timestamps
update-timestamps:
	@@if (cd $(srcdir) && test -d CVS && \
	    $(CVS) -n update $(TSDEPS_DIST) | grep '^M'); then \
		echo "Cannot make dist before commit"; exit 1; else :; fi

a49 8

.PHONY: configure-subdirs
configure-subdirs distdir: $(DIST_MAKEFILE_LIST)
@@DIST_MAKEFILE_LIST@@:
	dir=`echo $@@ | sed 's,^[^/]*$$,.,;s,/[^/]*$$,,'`; \
	test -d $$dir || mkdir $$dir || exit 1; \
	abs_srcdir=`cd $(top_srcdir) && pwd`; \
	(cd $$dir && $$abs_srcdir/$$dir/configure) || exit 1
@


1.5.4.1
log
@"automatic" merge

this is broken. we don't want this.
libtool.m4 isn't even similar to that from 1.4

so use 1.4 instead for mirlibtool, for now
@
text
@a13 2
FFLAGS = @@FFLAGS@@
FLIBS = @@FLIBS@@
d20 4
a23 5
# These are required by libtoolize and must be executable when installed.
# Since _SCRIPTS gets the program transform applied we make them
# executable by hand
pkgdata_DATA = config.guess config.sub ltmain.sh
 
d27 1
a27 1
libtool: $(srcdir)/ltmain.sh $(top_builddir)/configure.ac
d42 12
@


1.4
log
@<benz> mirlibtoolify
@
text
@a23 3
# This macro file should be visible to Automake's aclocal.
aclocal_DATA = $(aclocal_macros)

@


1.3
log
@who needs documentation, dupes (from GNUSYSTEM_AUX_DIR), ltdl anyways?
@
text
@d17 1
a17 1
EXTRA_DIST = $(aclocal_macros) bootstrap libtoolize.in ltmain.in mkstamp
d40 1
a40 1
	date=`$(SHELL) $(srcdir)/mkstamp < $(srcdir)/ChangeLog` && \
d48 2
a49 2
TSDEPS_DIST = ChangeLog libtool.m4
CVS = cvs # set it to `:' to avoid CVS operations
@


1.2
log
@* MirOSify
* bootstrap
* nuke unneeded stuff
@
text
@d5 1
a5 1
BUILD_SUBDIRS = . libltdl doc
d15 1
a15 1
aclocal_macros = libtool.m4 ltdl.m4
d17 1
a17 2
EXTRA_DIST = $(aclocal_macros) bootstrap libtoolize.in ltmain.in \
	mkstamp ChangeLog.0
d59 1
a59 6
all-recursive: $(srcdir)/libltdl/acinclude.m4 $(ACINCLUDE_M4_LIST)

@@srcdir@@/libltdl/acinclude.m4: $(srcdir)/libtool.m4 $(srcdir)/ltdl.m4
	-rm -f $@@ $@@T
	cat $(srcdir)/libtool.m4 $(srcdir)/ltdl.m4 > $@@T
	mv $@@T $@@
a72 34

# Create and install libltdl
install-data-hook:
	cd libltdl && $(MAKE) local-install-files

# Uninstall libltdl
uninstall-local:
	-rm -rf $(DESTDIR)$(pkgdatadir)/libltdl

################################################################
##
## Everything past here is useful to the maintainer, but probably not
## to anybody else (snarfed from automake/Makefile.am).
##

# Tag before making distribution.  Also, don't make a distribution if
# checks fail.  Also, make sure the NEWS file is up-to-date.
cvs-dist: distcheck
	@@if sed '1,2d;3q' $(srcdir)/NEWS | grep -e "$(VERSION)" > /dev/null; then :; else \
	  echo "NEWS not updated; not releasing" 1>&2; \
	  exit 1;				\
	fi
	cd $(srcdir) && \
	 $(CVS) -q tag `echo "release-$(VERSION)" | sed 's/\./-/g'`
	$(MAKE) dist

cvs-diff:
	thisver=`echo "release-$(VERSION)" | sed 's/\./-/g'`; \
	if test -z "$$OLDVERSION"; then \
	  prevno=`echo "$(VERSION)" - 0.01 | bc | sed 's/^\./0./'`; \
	else prevno="$$OLDVERSION"; fi; \
	prevver=release-`echo $$prevno | sed 's/\./-/g'`; \
	$(CVS) -f rdiff -c -r $$prevver -r $$thisver $(PACKAGE) \
	    > $(PACKAGE)-$$prevno-$(VERSION).diff
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
BUILD_SUBDIRS = . libltdl doc tests
@


1.1.2.1
log
@GNU Libtool 1.4.3 (last of the 1.4 series)

Requires to bootstrap:
* autoconf 2.13-o
* automake 1.4-p5
or later.
@
text
@@


1.1.2.2
log
@libtool 1.5 branch from today
@
text
@a5 1
CONF_SUBDIRS = @@CONF_SUBDIRS@@
a13 2
FFLAGS = @@FFLAGS@@
FLIBS = @@FLIBS@@
d18 1
a18 1
	mkstamp ChangeLog.0 ChangeLog.1
d21 4
a24 5
# These are required by libtoolize and must be executable when installed.
# Since _SCRIPTS gets the program transform applied we make them
# executable by hand
pkgdata_DATA = config.guess config.sub ltmain.sh
 
d31 1
a31 1
libtool: $(srcdir)/ltmain.sh $(top_builddir)/configure.ac
d46 12
a57 1
	cp $@@ $(srcdir)/libltdl/
d88 10
a97 60
install-data-hook:
	chmod +x $(DESTDIR)$(pkgdatadir)/config.guess
	chmod +x $(DESTDIR)$(pkgdatadir)/config.sub


## ---------------------------------------------------------------- ##
##  Everything past here is useful to the maintainer, but probably  ##
##  not to anybody else (inspiration from automake/Makefile.am).    ##
## ---------------------------------------------------------------- ##

.PHONY: cvs-release
cvs-release: version-check prev-tarball cvs-news fetch cvs-commit cvs-dist deltas
	@@tarname="$(PACKAGE)-$(VERSION).tar.gz"; \
	diffname="$(PACKAGE)-$(LASTRELEASE)-$(VERSION).diff.gz"; \
	xdeltaname="$(PACKAGE)-$(LASTRELEASE)-$(VERSION).xdelta"; \
	echo " *** Upload $$tarname, $$tarname.sig,";\
	echo " *** $$tarname.directive.asc, $$diffname,"; \
	echo " *** $$diffname.sig, $$diffname.directive.asc,"; \
	echo " *** $$xdeltaname, $$xdeltaname.sig and";\
	echo " *** $$xdeltaname.directive.asc to either";\
	echo " *** /incoming/alpha or /incoming/ftp on ftp-upload.gnu.org.";

.PHONY: version-check
version-check:
	@@case $(VERSION) in \
	*[acegikmoqsuwy]) \
	  echo "Version \`$(VERSION)' is not a releasable version, please read:"; \
	  echo "    http://www.gnu.org/software/libtool/contribute.html"; \
	  exit 1; \
	  ;; \
	esac

.PHONY: prev-tarball
prev-tarball:
## Make sure we have the previous release tarball in the tree.
	@@if test -z "$(LASTRELEASE)"; \
		then echo "LASTRELEASE is not set"; exit 1; fi
	@@ofile="$(PACKAGE)-$(LASTRELEASE).tar.gz"; \
	if test -f $$ofile; then :; \
	else echo "Cannot make deltas without $$ofile"; exit 1; fi

# TSDEPS will be defined to TSDEPS_DIST at `make dist' time
TSDEPS =
TSDEPS_DIST = ChangeLog libtool.m4
CVS = cvs # set it to `:' to avoid CVS operations

.PHONY: timestamps update-timestamps
timestamps: update-timestamps
update-timestamps:
	@@if (cd $(srcdir) && test -d CVS && \
	    $(CVS) -n update $(TSDEPS_DIST) | grep '^M'); then \
		echo "Cannot make cvs-dist before commit"; exit 1; else :; fi


.PHONY: cvs-news
cvs-news:
## Make sure the NEWS file is up-to-date:
	@@if sed '1,2d;3q' $(srcdir)/NEWS | grep -e "$(VERSION)" >/dev/null; \
	then :; \
	else \
d99 1
a99 80
	  exit 1; \
	fi

## Program to use to fetch files.
WGET = wget
WGETSGO = $(WGET) http://savannah.gnu.org/cgi-bin/viewcvs/~checkout~

## Files that we fetch and which we compare against.
## FIXME should be a lot more here
FETCHFILES = \
./INSTALL \
./config.guess \
libltdl/config.guess \
./config.sub \
libltdl/config.sub \
doc/texinfo.tex

## Fetch the latest versions of files we care about.
.PHONY: fetch
fetch:
	rm -rf Fetchdir > /dev/null 2>&1
	mkdir Fetchdir
## If a get fails then that is a problem.
	(cd Fetchdir && \
	$(WGETSGO)/autoconf/autoconf/INSTALL; \
	$(WGETSGO)/config/config/config.guess; \
	$(WGETSGO)/config/config/config.sub; \
	$(WGETSGO)/texinfo/texinfo/doc/texinfo.tex )
## Don't exit after test because we want to give as many errors as
## possible.
	@@stat=0; for file in $(FETCHFILES); do \
	  fetchedfile=Fetchdir/`echo $$file | sed 's,.*/,,g'`; \
	  if diff -u $(srcdir)/$$file $$fetchedfile \
	    >>Fetchdir/update.patch 2>/dev/null; then :; \
	  else \
	    stat=1; \
	    echo "Updating $(srcdir)/$$file..."; \
	    cp $$fetchedfile $(srcdir)/$$file; \
	  fi; \
	done; \
	test $$stat = 1 && \
	  echo "See Fetchdir/update.patch for a log of the changes."; \
	exit $$stat


GPG = gpg # set it to `:' to avoid gpg operations

.PHONY: cvs-commit
cvs-commit: cvs-news
	cd $(srcdir) && $(SHELL) ./commit

.PHONY: cvs-dist
cvs-dist: cvs-news timestamps
## Build the distribution:
	$(MAKE) distcheck
## Finally, if everything was successful, tag the release
	cd $(srcdir) \
	  && $(CVS) -q tag -c `echo "release-$(VERSION)" | sed 's/\./-/g'`
## Generate signatures and directives for FSF ftp-upload:
	ofile="$(PACKAGE)-$(VERSION).tar.gz"; \
	$(GPG) --detach-sign $$ofile \
	&& echo "directory: libtool" > $$ofile.directive \
	&& $(GPG) --clearsign $$ofile.directive \
	&& rm -f $$ofile.directive

.PHONY: new-tarball
new-tarball:
## Make sure we have the new release tarball in the tree.
	@@ofile="$(PACKAGE)-$(VERSION).tar.gz"; \
	if test -f $$ofile; then :; \
	else echo "Cannot make deltas without $$ofile"; exit 1; fi

.PHONY: got-xdelta
got-xdelta:
## Make sure xdelta exists;
	@@if ($(XDELTA) --version 2>&1 | grep version)>/dev/null 2>/dev/null; \
	then :;\
	else \
	  echo "Get xdelta from http://sourceforge.net/projects/xdelta."; \
	  exit 1; \
d101 12
a112 45

.PHONY: deltas
deltas: delta-diff delta-xdelta

DIFF = diff
DIFF_OPTIONS = -ruNp

.PHONY: delta-diff
delta-diff: prev-tarball new-tarball
## Unpack the tarballs somewhere to diff them
	rm -rf delta-diff
	mkdir delta-diff
	
	ofile="../$(PACKAGE)-$(LASTRELEASE)-$(VERSION).diff.gz"; \
	cd delta-diff \
	&& tar xzf "../$(PACKAGE)-$(LASTRELEASE).tar.gz" \
	&& tar xzf "../$(PACKAGE)-$(VERSION).tar.gz" \
	&& $(DIFF) $(DIFF_OPTIONS) \
		$(PACKAGE)-$(LASTRELEASE) $(PACKAGE)-$(VERSION) \
		| GZIP=$(GZIP_ENV) gzip -c > $$ofile \
	&& $(GPG) --detach-sign $$ofile \
	&& echo "directory: libtool" > $$ofile.directive \
	&& $(GPG) --clearsign $$ofile.directive \
	&& rm -f $$ofile.directive

	rm -rf delta-diff
	
XDELTA = xdelta
XDELTA_OPTIONS = --pristine -9

.PHONY: delta-xdelta
delta-xdelta: prev-tarball new-tarball got-xdelta
## Generate the delta file (xdelta has wierd exit statuses, so we need to
## add some shell code to keep make happy), and then generate the signatures
## for FSF ftp-upload:
	ofile="$(PACKAGE)-$(LASTRELEASE)-$(VERSION).xdelta"; \
	( test -z `$(XDELTA) delta $(XDELTA_OPTIONS) \
	    $(PACKAGE)-$(LASTRELEASE).tar.gz $(PACKAGE)-$(VERSION).tar.gz \
	    $$ofile 2>&1` \
	  && : ) \
	&& $(GPG) --detach-sign $$ofile \
	&& echo "directory: libtool" > $$ofile.directive \
	&& $(GPG) --clearsign $$ofile.directive \
	&& rm -f $$ofile.directive

@


1.1.2.3
log
@http://ftp.gnu.org/gnu/libtool/libtool-1.5.8.tar.gz
@
text
@d28 1
a28 1

a75 2
	chmod +x $(DESTDIR)$(pkgdatadir)/config.guess
	chmod +x $(DESTDIR)$(pkgdatadir)/config.sub
d81 4
a90 2
TEXI2HTML = texi2html

d92 1
a92 1
cvs-release: version-check prev-tarball cvs-news fetch cvs-commit cvs-dist deltas web-manual
d100 2
a101 3
	echo " *** $$xdeltaname.directive.asc to either"
	echo " *** /incoming/alpha or /incoming/ftp on ftp-upload.gnu.org."
	echo " *** You might need to upload manual.html to webcvs/libtool."
d235 1
d247 1
d249 1
a249 1

d251 1
a251 1
XDELTA_OPTIONS = -9
a267 6
.PHONY: web-manual
web-manual:
	@@$(LN_S) $(top_srcdir)/doc/libtool.texi doc/manual.texi
	$(TEXI2HTML) -I doc -monolithic -number -verbose doc/manual.texi
	@@mv doc/manual.html manual.html
	@@rm -f doc/manual.texi
@


