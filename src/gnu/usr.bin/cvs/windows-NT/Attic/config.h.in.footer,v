head	1.2;
access;
symbols
	cvs-1_12_11:1.1.2.1 FSF:1.1.2;
locks; strict;
comment	@# @;


1.2
date	2005.01.08.21.48.55;	author tg;	state dead;
branches;
next	1.1;

1.1
date	2005.01.08.21.13.49;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.01.08.21.13.49;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fastmerge
@
text
@/*============================================================================*/
/* config.h.in.footer:  configuration file for Windows NT
   Conrad T. Pino <Conrad@@Pino.com> --- May 2004 */

/* This file lives in the windows-NT subdirectory, which is only included
   in your header search path if you're working under Microsoft Visual C++,
   and use ../cvsnt.mak for your project.  Thus, this is the right place to
   put configuration information for Windows NT.  */

/* Define if you have the <sys/timeb.h> header file.  */
#define HAVE_SYS_TIMEB_H 1

/* Under Windows NT, mkdir only takes one argument.  */
#define CVS_MKDIR wnt_mkdir
int wnt_mkdir (const char *PATH, int MODE);

#define CVS_STAT wnt_stat
int wnt_stat ();

#define CVS_LSTAT wnt_lstat
int wnt_lstat ();

#define CVS_RENAME wnt_rename
int wnt_rename (const char *, const char *);

/* This function doesn't exist under Windows NT; we
   provide a stub.  */
int readlink (char *path, char *buf, int buf_size);

/* This is just a call to GetCurrentProcessID.  */
pid_t getpid (void);

/* This is just a call to the Win32 Sleep function.  */
unsigned int sleep (unsigned int);

/* Don't worry, Microsoft, it's okay for these functions to
   be in our namespace.  */
#define popen _popen
#define pclose _pclose

/* Diff needs us to define this.  I think it could always be
   -1 for CVS, because we pass temporary files to diff, but
   config.h seems like the easiest place to put this, so for
   now we put it here.  */
#define same_file(s,t) (-1)

/* This is where old bits go to die under Windows NT.  */
#define DEVNULL "nul"

#define START_SERVER wnt_start_server
void wnt_start_server (int *tofd, int *fromfd,
		       char *client_user,
		       char *server_user,
		       char *server_host,
		       char *server_cvsroot);

#define SHUTDOWN_SERVER wnt_shutdown_server
void wnt_shutdown_server (int fd);

#define SYSTEM_INITIALIZE(pargc,pargv) init_winsock()
void init_winsock();

#define SYSTEM_CLEANUP wnt_cleanup
void wnt_cleanup (void);

#define HAVE_WINSOCK_H

/* This tells the client that it must use send()/recv() to talk to the
   server if it is connected to the server via a socket; Win95 needs
   it because _open_osfhandle doesn't work.  */
#define NO_SOCKET_TO_FD 1

/* This tells the client that, in addition to needing to use
   send()/recv() to do socket I/O, the error codes for send()/recv()
   and other socket operations are not available through errno.
   Instead, this macro should be used to obtain an error code. */
#define SOCK_ERRNO (WSAGetLastError ())

/* This tells the client that, in addition to needing to use
   send()/recv() to do socket I/O, the error codes for send()/recv()
   and other socket operations are not known to strerror.  Instead,
   this macro should be used to convert the error codes to strings. */
#define SOCK_STRERROR sock_strerror
char *sock_strerror (int errnum);

/* The internal rsh client uses sockets not file descriptors.  Note
   that as the code stands now, it often takes values from a SOCKET and
   puts them in an int.  This is ugly but it seems like sizeof
   (SOCKET) <= sizeof (int) on win32, even the 64-bit variants.  */
#define START_SERVER_RETURNS_SOCKET 1

/* Is this true on NT?  Seems like I remember reports that NT 3.51 has
   problems with 200K writes (of course, the issue of large writes is
   moot since the use of buffer.c ensures that writes will only be as big
   as the buffers).  */
#define SEND_NEVER_PARTIAL 1

/* getpagesize is missing on Windows, but 4096 seems to do the right
   thing. */
#define getpagesize() 4096
@


1.1
log
@Initial revision
@
text
@@


1.1.2.1
log
@GNU CVS 1.12.11
@
text
@@
