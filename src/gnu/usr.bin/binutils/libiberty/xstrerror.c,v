head	1.2;
access;
symbols
	binutils-20050118:1.1.2.1
	binutils-050108:1.1.2.1
	FSF:1.1.2;
locks; strict;
comment	@ * @;


1.2
date	2005.01.13.21.56.56;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.08.23.02.38;	author tg;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2005.01.08.23.02.38;	author tg;	state Exp;
branches;
next	;


desc
@@


1.2
log
@start merging
* without generated files
* docs are going to be built
* untested ("minimal change" concept)
* with assignment back to the FSF
@
text
@/* $MirBSD: src/gnu/usr.bin/binutils/src/libiberty/xstrerror.c,v 1.3 2005/01/13 19:44:22 tg Exp $ */

/* xstrerror.c -- jacket routine for more robust strerror() usage.
   Fri Jun 16 18:30:00 1995  Pat Rankin  <rankin@@eql.caltech.edu>
   This code is in the public domain.  */

/*

@@deftypefn Replacement char* xstrerror (int @@var{errnum})

Behaves exactly like the standard @@code{strerror} function, but
will never return a @@code{NULL} pointer.

@@end deftypefn

*/

#include <stdio.h>

#include "config.h"
#include "libiberty.h"

__RCSID("$MirBSD: src/gnu/usr.bin/binutils/src/libiberty/xstrerror.c,v 1.3 2005/01/13 19:44:22 tg Exp $");

#ifdef VMS
#include <errno.h>
#if !defined (__STRICT_ANSI__) && !defined (__HIDE_FORBIDDEN_NAMES)
extern char *strerror PARAMS ((int,...));
#define DONT_DECLARE_STRERROR
#endif
#endif	/* VMS */

#ifndef DONT_DECLARE_STRERROR
extern char *strerror PARAMS ((int));
#endif

/* If strerror returns NULL, we'll format the number into a static buffer.  */

#define ERRSTR_FMT "undocumented error #%d"
static char xstrerror_buf[sizeof ERRSTR_FMT + 20];

/* Like strerror, but result is never a null pointer.  */

char *
xstrerror (errnum)
     int errnum;
{
  char *errstr;
#ifdef VMS
  char *(*vmslib_strerror) PARAMS ((int,...));

  /* Override any possibly-conflicting declaration from system header.  */
  vmslib_strerror = (char *(*) PARAMS ((int,...))) strerror;
  /* Second argument matters iff first is EVMSERR, but it's simpler to
     pass it unconditionally.  `vaxc$errno' is declared in <errno.h>
     and maintained by the run-time library in parallel to `errno'.
     We assume that `errnum' corresponds to the last value assigned to
     errno by the run-time library, hence vaxc$errno will be relevant.  */
  errstr = (*vmslib_strerror) (errnum, vaxc$errno);
#else
  errstr = strerror (errnum);
#endif

  /* If `errnum' is out of range, result might be NULL.  We'll fix that.  */
  if (!errstr)
    {
      snprintf (xstrerror_buf, sizeof(ERRSTR_FMT) + 20, ERRSTR_FMT, errnum);
      errstr = xstrerror_buf;
    }
  return errstr;
}
@


1.1
log
@Initial revision
@
text
@d1 2
d23 2
d67 1
a67 1
      sprintf (xstrerror_buf, ERRSTR_FMT, errnum);
@


1.1.2.1
log
@GNU binutils 2.15-current, from
 ftp://sources.redhat.com/pub/binutils/snapshots/binutils-050108.tar.bz2
with the following directories removed:
 bfd/po
 binutils/po
 binutils/testsuite
 gas/po
 gas/testsuite
 gprof
 intl
 ld/po
 ld/testsuite
 opcodes/po
 texinfo
and all top-level non-directory files.
@
text
@@
