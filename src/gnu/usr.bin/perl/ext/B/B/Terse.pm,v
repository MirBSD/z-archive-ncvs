head	2.1;
branch	1.1.1;
access;
symbols
	cvs-200501160850:1.1.1.2
	start:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


2.1
date	2005.01.03.16.23.42;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.12.21.27.28;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.12.21.27.28;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.01.16.09.55.54;	author tg;	state Exp;
branches;
next	;


desc
@@


2.1
log
@work over most of the changes MirOS has done, and add
the new or copied/moved files
@
text
@package B::Terse;

our $VERSION = '1.02';

use strict;
use B qw(class);
use B::Asmdata qw(@@specialsv_name);
use B::Concise qw(concise_subref set_style_standard);
use Carp;

sub terse {
    my ($order, $subref) = @@_;
    set_style_standard("terse");
    if ($order eq "exec") {
	concise_subref('exec', $subref);
    } else {
	concise_subref('basic', $subref);
    }

}

sub compile {
    my @@args = @@_;
    my $order = @@args ? shift(@@args) : "";
    $order = "-exec" if $order eq "exec";
    unshift @@args, $order if $order ne "";
    B::Concise::compile("-terse", @@args);
}

sub indent {
    my $level = @@_ ? shift : 0;
    return "    " x $level;
}

# Don't use this, at least on OPs in subroutines: it has no way of
# getting to the pad, and will give wrong answers or crash.
sub B::OP::terse {
    carp "B::OP::terse is deprecated; use B::Concise instead";
    B::Concise::b_terse(@@_);
}

sub B::SV::terse {
    my($sv, $level) = (@@_, 0);
    my %info;
    B::Concise::concise_sv($sv, \%info);
    my $s = B::Concise::fmt_line(\%info, "#svclass~(?((#svaddr))?)~#svval", 0);
    print indent($level), $s, "\n";
}

sub B::NULL::terse {
    my ($sv, $level) = @@_;
    print indent($level);
    printf "%s (0x%lx)\n", class($sv), $$sv;
}

sub B::SPECIAL::terse {
    my ($sv, $level) = @@_;
    print indent($level);
    printf "%s #%d %s\n", class($sv), $$sv, $specialsv_name[$$sv];
}

1;

__END__

=head1 NAME

B::Terse - Walk Perl syntax tree, printing terse info about ops

=head1 SYNOPSIS

	perl -MO=Terse[,OPTIONS] foo.pl

=head1 DESCRIPTION

This version of B::Terse is really just a wrapper that calls B::Concise
with the B<-terse> option. It is provided for compatibility with old scripts
(and habits) but using B::Concise directly is now recommended instead.

For compatiblilty with the old B::Terse, this module also adds a
method named C<terse> to B::OP and B::SV objects. The B::SV method is
largely compatible with the old one, though authors of new software
might be advised to choose a more user-friendly output format. The
B::OP C<terse> method, however, doesn't work well. Since B::Terse was
first written, much more information in OPs has migrated to the
scratchpad datastructure, but the C<terse> interface doesn't have any
way of getting to the correct pad. As a kludge, the new version will
always use the pad for the main program, but for OPs in subroutines
this will give the wrong answer or crash.

=head1 AUTHOR

The original version of B::Terse was written by Malcolm Beattie,
E<lt>mbeattie@@sable.ox.ac.ukE<gt>. This wrapper was written by Stephen
McCamant, E<lt>smcc@@MIT.EDUE<gt>.

=cut
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import base OpenBSD repository of MirOS ocvs:HEAD
@
text
@@


1.1.1.2
log
@Import a series of fixes and minor updates from OpenBSD
@
text
@d19 1
d31 1
a31 1
    my ($level) = @@_ ? shift : 0;
d46 2
a47 6
    my $s = indent($level)
	. B::Concise::fmt_line(\%info, $sv,
				 "#svclass~(?((#svaddr))?)~#svval", 0);
    chomp $s;
    print "$s\n" unless defined wantarray;
    $s;
d52 2
a53 3
    my $s = indent($level) . sprintf "%s (0x%lx)", class($sv), $$sv;
    print "$s\n" unless defined wantarray;
    $s;
d58 2
a59 4
    my $s = indent($level)
	. sprintf( "%s #%d %s", class($sv), $$sv, $specialsv_name[$$sv]);
    print "$s\n" unless defined wantarray;
    $s;
@

