head	2.1;
branch	1.1.1;
access;
symbols
	cvs-200501160850:1.1.1.1
	start:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


2.1
date	2005.01.03.16.26.35;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.12.21.28.59;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.12.21.28.59;	author tg;	state Exp;
branches;
next	;


desc
@@


2.1
log
@work over most of the changes MirOS has done, and add
the new or copied/moved files
@
text
@#!./perl -w

BEGIN {
    chdir "t" if -d "t";
    @@INC = qw(. ../lib);
}

# Test srand.

use strict;

require "test.pl";
plan(tests => 4);

# Generate a load of random numbers.
# int() avoids possible floating point error.
sub mk_rand { map int rand 10000, 1..100; }


# Check that rand() is deterministic.
srand(1138);
my @@first_run  = mk_rand;

srand(1138);
my @@second_run = mk_rand;

ok( eq_array(\@@first_run, \@@second_run),  'srand(), same arg, same rands' );


# Check that different seeds provide different random numbers
srand(31337);
@@first_run  = mk_rand;

srand(1138);
@@second_run = mk_rand;

ok( !eq_array(\@@first_run, \@@second_run),
                                 'srand(), different arg, different rands' );


# Check that srand() isn't affected by $_
{   
    local $_ = 42;
    srand();
    @@first_run  = mk_rand;

    srand(42);
    @@second_run = mk_rand;

    ok( !eq_array(\@@first_run, \@@second_run),
                       'srand(), no arg, not affected by $_');
}

# This test checks whether Perl called srand for you.
@@first_run  = `$^X -le "print int rand 100 for 1..100"`;
sleep(1); # in case our srand() is too time-dependent
@@second_run = `$^X -le "print int rand 100 for 1..100"`;

ok( !eq_array(\@@first_run, \@@second_run), 'srand() called automatically');
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import base OpenBSD repository of MirOS ocvs:HEAD
@
text
@@
