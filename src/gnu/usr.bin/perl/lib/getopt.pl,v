head	2.1;
branch	1.1.1;
access;
symbols
	cvs-200501160850:1.1.1.1
	start:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@# @;


2.1
date	2005.01.03.16.24.58;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.12.21.28.06;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.12.21.28.06;	author tg;	state Exp;
branches;
next	;


desc
@@


2.1
log
@work over most of the changes MirOS has done, and add
the new or copied/moved files
@
text
@;# $RCSfile: getopt.pl,v $$Revision: 1.1.1.2 $$Date: 2003/12/03 17:55:29 $
#
# This library is no longer being maintained, and is included for backward
# compatibility with Perl 4 programs which may require it.
#
# In particular, this should not be used as an example of modern Perl
# programming techniques.
#
# Suggested alternatives: Getopt::Long or Getopt::Std
#
;# Process single-character switches with switch clustering.  Pass one argument
;# which is a string containing all switches that take an argument.  For each
;# switch found, sets $opt_x (where x is the switch name) to the value of the
;# argument, or 1 if no argument.  Switches which take an argument don't care
;# whether there is a space between the switch and the argument.

;# Usage:
;#	do Getopt('oDI');  # -o, -D & -I take arg.  Sets opt_* as a side effect.

sub Getopt {
    local($argumentative) = @@_;
    local($_,$first,$rest);
    local($[) = 0;

    while (@@ARGV && ($_ = $ARGV[0]) =~ /^-(.)(.*)/) {
	($first,$rest) = ($1,$2);
	if (index($argumentative,$first) >= $[) {
	    if ($rest ne '') {
		shift(@@ARGV);
	    }
	    else {
		shift(@@ARGV);
		$rest = shift(@@ARGV);
	    }
	    ${"opt_$first"} = $rest;
	}
	else {
	    ${"opt_$first"} = 1;
	    if ($rest ne '') {
		$ARGV[0] = "-$rest";
	    }
	    else {
		shift(@@ARGV);
	    }
	}
    }
}

1;
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
;# $RCSfile: getopt.pl,v $$Revision: 1.7 $$Date: 2003/12/03 03:02:36 $
@


1.1.1.1
log
@Import base OpenBSD repository of MirOS ocvs:HEAD
@
text
@@
