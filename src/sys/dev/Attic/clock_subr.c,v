head	2.3;
access;
symbols
	start:1.1.1.1 openbsd:1.1.1;
locks; strict;
comment	@ * @;


2.3
date	2005.01.16.07.10.31;	author tg;	state dead;
branches;
next	2.2;

2.2
date	2005.01.16.03.33.41;	author tg;	state Exp;
branches;
next	2.1;

2.1
date	2005.01.03.16.35.16;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.12.21.32.37;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.12.21.32.37;	author tg;	state Exp;
branches;
next	;


desc
@@


2.3
log
@remove clock_subr and use the taitime/struct tm/time_t functions
directly. as a bonus, my clock (seems to) be not 50s off after
reboot any more, which it had been with even gcc 3.2.3 :( and I
didn't notice.

sub eax,0
sbb edx,12345678
^- weird code, isn't it? gcc can't optimise.
@
text
@/**	$MirBSD: src/sys/dev/clock_subr.c,v 2.2 2005/01/16 03:33:41 tg Exp $ */

/*-
 * Copyright (c) 2004, 2005
 *	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
 *
 * Licensee is hereby permitted to deal in this work without restric-
 * tion, including unlimited rights to use, publicly perform, modify,
 * merge, distribute, sell, give away or sublicence, provided all co-
 * pyright notices above, these terms and the disclaimer are retained
 * in all redistributions or reproduced in accompanying documentation
 * or other materials provided with binary redistributions.
 *
 * Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
 * any kind, expressed or implied, to the maximum extent permitted by
 * applicable law, but with the warranty of being written without ma-
 * licious intent or gross negligence; in no event shall licensor, an
 * author or contributor be held liable for any damage, direct, indi-
 * rect or other, however caused, arising in any way out of the usage
 * of this work, even if advised of the possibility of such damage.
 */

#include <sys/types.h>
#include <sys/systm.h>
#include <lib/libkern/taitime.h>
#include <dev/clock_subr.h>

time_t
clock_ymdhms_to_secs(struct clock_ymdhms *dt)
{
	struct tm tm;
	time_t t;	/* because tai2timet is a macro */

	tm.tm_year = dt->dt_year - 1900;
	tm.tm_mon = dt->dt_mon - 1;
	tm.tm_mday = dt->dt_day;
	tm.tm_hour = dt->dt_hour;
	tm.tm_min = dt->dt_min;
	tm.tm_sec = dt->dt_sec;

	t = tai2timet(mjd2tai(tm2mjd(tm)));
	return t;
}

void
clock_secs_to_ymdhms(time_t secs, struct clock_ymdhms *dt)
{
	struct tm tm;

	tm = mjd2tm(tai2mjd(timet2tai(secs)));

	dt->dt_year = 1900 + tm.tm_year;
	dt->dt_mon = 1 + tm.tm_mon;
	dt->dt_day = tm.tm_mday;
	dt->dt_hour = tm.tm_hour;
	dt->dt_min = tm.tm_min;
	dt->dt_sec = tm.tm_sec;
	dt->dt_wday = tm.tm_wday;
}
@


2.2
log
@fix another bug introduced when tai2timet and timet2tai
became macros
@
text
@d1 1
a1 1
/**	$MirBSD: src/share/misc/licence.template,v 1.20 2004/12/03 16:18:37 tg Rel $ */
@


2.1
log
@work over most of the changes MirOS has done, and add
the new or copied/moved files
@
text
@d1 4
a4 3
/* $MirBSD: src/sys/dev/clock_subr.c,v 1.2 2004/07/02 16:52:33 tg Stab $
 *-
 * Copyright (c) 2004
d8 5
a12 5
 * tion, including unlimited rights to use, publically perform, modi-
 * fy, merge, distribute, sell, give away or sublicence, provided the
 * above copyright notices, these terms and the disclaimer are retai-
 * ned in all redistributions, or reproduced in accompanying documen-
 * tation or other materials provided with binary redistributions.
d20 1
a20 1
 * of covered work, even if advised of the possibility of such damage.
d32 1
d41 2
a42 1
	return tai2timet(mjd2tai(tm2mjd(tm)));
@


1.1
log
@Initial revision
@
text
@d1 4
a4 23
/*	$OpenBSD: clock_subr.c,v 1.3 2003/06/02 23:28:01 millert Exp $	*/
/*	$NetBSD: clock_subr.c,v 1.3 1997/03/15 18:11:16 is Exp $	*/

/*
 * Copyright (c) 1988 University of Utah.
 * Copyright (c) 1982, 1990, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * the Systems Programming Group of the University of Utah Computer
 * Science Department.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
d6 6
a11 11
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
d13 7
a19 9
 * from: Utah $Hdr: clock.c 1.18 91/01/21$
 *
 *	@@(#)clock.c	8.2 (Berkeley) 1/12/94
 */

/*
 * Generic routines to convert between a POSIX date
 * (seconds since 1/1/1970) and yr/mo/day/hr/min/sec
 * Derived from arch/hp300/hp300/clock.c
d24 1
a24 1

a26 37
/* Traditional POSIX base year */
#define	POSIX_BASE_YEAR	1970

static inline int leapyear(int year);
#define FEBRUARY	2
#define	days_in_year(a) 	(leapyear(a) ? 366 : 365)
#define	days_in_month(a) 	(month_days[(a) - 1])

static const int month_days[12] = {
	31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31
};

/*
 * This inline avoids some unnecessary modulo operations
 * as compared with the usual macro:
 *   ( ((year % 4) == 0 &&
 *      (year % 100) != 0) ||
 *     ((year % 400) == 0) )
 * It is otherwise equivalent.
 */
static inline int
leapyear(year)
	int year;
{
	int rv = 0;

	if ((year & 3) == 0) {
		rv = 1;
		if ((year % 100) == 0) {
			rv = 0;
			if ((year % 400) == 0)
				rv = 1;
		}
	}
	return (rv);
}

d28 1
a28 2
clock_ymdhms_to_secs(dt)
	struct clock_ymdhms *dt;
d30 1
a30 2
	time_t secs;
	int i, year, days;
d32 6
a37 1
	year = dt->dt_year;
d39 1
a39 22
	/*
	 * Compute days since start of time
	 * First from years, then from months.
	 */
	days = 0;
	for (i = POSIX_BASE_YEAR; i < year; i++)
		days += days_in_year(i);
	if (leapyear(year) && dt->dt_mon > FEBRUARY)
		days++;

	/* Months */
	for (i = 1; i < dt->dt_mon; i++)
	  	days += days_in_month(i);
	days += (dt->dt_day - 1);

	/* Add hours, minutes, seconds. */
	secs = ((days
	    * 24 + dt->dt_hour)
	    * 60 + dt->dt_min)
	    * 60 + dt->dt_sec;

	return (secs);
a41 4
/* This function uses a copy of month_days[] */
#undef	days_in_month
#define	days_in_month(a) 	(mthdays[(a) - 1])

d43 1
a43 3
clock_secs_to_ymdhms(secs, dt)
	time_t secs;
	struct clock_ymdhms *dt;
d45 11
a55 33
	int mthdays[12];
	int i, days;
	int rsec;	/* remainder seconds */

	bcopy(month_days, mthdays, sizeof(mthdays));

	days = secs / SECDAY;
	rsec = secs % SECDAY;

	/* Day of week (Note: 1/1/1970 was a Thursday) */
	dt->dt_wday = (days + 4) % 7;

	/* Subtract out whole years, counting them in i. */
	for (i = POSIX_BASE_YEAR; days >= days_in_year(i); i++)
		days -= days_in_year(i);
	dt->dt_year = i;

	/* Subtract out whole months, counting them in i. */
	if (leapyear(i))
		days_in_month(FEBRUARY) = 29;
	for (i = 1; days >= days_in_month(i); i++)
		days -= days_in_month(i);
	dt->dt_mon = i;

	/* Days are what is left over (+1) from all that. */
	dt->dt_day = days + 1;

	/* Hours, minutes, seconds are easy */
	dt->dt_hour = rsec / 3600;
	rsec = rsec % 3600;
	dt->dt_min  = rsec / 60;
	rsec = rsec % 60;
	dt->dt_sec  = rsec;
@


1.1.1.1
log
@Import base OpenBSD repository of MirOS ocvs:HEAD
@
text
@@
