head	2.1;
branch	1.1.1;
access;
symbols
	cvs-200501160850:1.1.1.2
	start:1.1.1.1
	openbsd:1.1.1;
locks; strict;
comment	@.\" @;


2.1
date	2005.01.03.16.28.09;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.12.21.29.41;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.12.21.29.41;	author tg;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.01.18.19.13.06;	author tg;	state Exp;
branches;
next	;


desc
@@


2.1
log
@work over most of the changes MirOS has done, and add
the new or copied/moved files
@
text
@.\"	$OpenBSD: inet6_option_space.3,v 1.13 2003/08/08 09:26:02 jmc Exp $
.\"	$KAME: inet6_option_space.3,v 1.7 2000/05/17 14:32:13 itojun Exp $
.\"
.\" Copyright (c) 1983, 1987, 1991, 1993
.\"	The Regents of the University of California.  All rights reserved.
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\" 1. Redistributions of source code must retain the above copyright
.\"    notice, this list of conditions and the following disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    notice, this list of conditions and the following disclaimer in the
.\"    documentation and/or other materials provided with the distribution.
.\" 3. Neither the name of the University nor the names of its contributors
.\"    may be used to endorse or promote products derived from this software
.\"    without specific prior written permission.
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd December 10, 1999
.Dt INET6_OPTION_SPACE 3
.Os
.\"
.Sh NAME
.Nm inet6_option_space ,
.Nm inet6_option_init ,
.Nm inet6_option_append ,
.Nm inet6_option_alloc ,
.Nm inet6_option_next ,
.Nm inet6_option_find
.Nd IPv6 Hop-by-Hop and Destination Options manipulation
.\"
.Sh SYNOPSIS
.Fd #include <netinet/in.h>
.Ft "int"
.Fn inet6_option_space "int nbytes"
.Ft "int"
.Fn inet6_option_init "void *bp" "struct cmsghdr **cmsgp" "int type"
.Ft "int"
.Fn inet6_option_append "struct cmsghdr *cmsg" "const u_int8_t *typep" "int multx" "int plusy"
.Ft "u_int8_t *"
.Fn inet6_option_alloc "struct cmsghdr *cmsg" "int datalen" "int multx" "int plusy"
.Ft "int"
.Fn inet6_option_next "const struct cmsghdr *cmsg" "u_int8_t **tptrp"
.Ft "int"
.Fn inet6_option_find "const struct cmsghdr *cmsg" "u_int8_t **tptrp" "int type"
.\"
.Sh DESCRIPTION
.\"
Building and parsing the Hop-by-Hop and Destination options is
complicated due to alignment constraints, padding and
ancillary data manipulation.
RFC 2292 defines a set of functions to help the application.
The function prototypes for
these functions are all in the
.Aq Pa netinet/in.h
header.
.\"
.Ss inet6_option_space
.Fn inet6_option_space
returns the number of bytes required to hold an option when it is stored as
ancillary data, including the
.Li cmsghdr
structure at the beginning,
and any padding at the end
.Po
to make its size a multiple of 8 bytes
.Pc .
The argument is the size of the structure defining the option,
which must include any pad bytes at the beginning
.Po
the value
.Li y
in the alignment term
.Dq Li xn + y
.Pc ,
the type byte, the length byte, and the option data.
.Pp
Note: If multiple options are stored in a single ancillary data
object, which is the recommended technique, this function
overestimates the amount of space required by the size of
.Li N-1
.Li cmsghdr
structures,
where
.Li N
is the number of options to be stored in the object.
This is of little consequence, since it is assumed that most
Hop-by-Hop option headers and Destination option headers carry only
one option
.Pq appendix B of [RFC 2460] .
.\"
.Ss inet6_option_init
.Fn inet6_option_init
is called once per ancillary data object that will
contain either Hop-by-Hop or Destination options.
It returns
.Li 0
on success or
.Li -1
on an error.
.Pp
.Fa bp
is a pointer to previously allocated space that will contain the
ancillary data object.
It must be large enough to contain all the
individual options to be added by later calls to
.Fn inet6_option_append
and
.Fn inet6_option_alloc .
.Pp
.Fa cmsgp
is a pointer to a pointer to a
.Li cmsghdr
structure.
.Fa *cmsgp
is initialized by this function to point to the
.Li cmsghdr
structure constructed by this function in the buffer pointed to by
.Fa bp .
.Pp
.Fa type
is either
.Dv IPV6_HOPOPTS
or
.Dv IPV6_DSTOPTS .
This
.Fa type
is stored in the
.Li cmsg_type
member of the
.Li cmsghdr
structure pointed to by
.Fa *cmsgp .
.\"
.Ss inet6_option_append
This function appends a Hop-by-Hop option or a Destination option
into an ancillary data object that has been initialized by
.Fn inet6_option_init .
This function returns
.Li 0
if it succeeds or
.Li -1
on an error.
.Pp
.Fa cmsg
is a pointer to the
.Li cmsghdr
structure that must have been
initialized by
.Fn inet6_option_init .
.Pp
.Fa typep
is a pointer to the 8-bit option type.
It is assumed that this
field is immediately followed by the 8-bit option data length field,
which is then followed immediately by the option data.
The caller
initializes these three fields
.Pq the type-length-value, or TLV
before calling this function.
.Pp
The option type must have a value from
.Li 2
to
.Li 255 ,
inclusive.
.Po
.Li 0
and
.Li 1
are reserved for the
.Li Pad1
and
.Li PadN
options, respectively.
.Pc
.Pp
The option data length must have a value between
.Li 0
and
.Li 255 ,
inclusive, and is the length of the option data that follows.
.Pp
.Fa multx
is the value
.Li x
in the alignment term
.Dq Li xn + y .
It must have a value of
.Li 1 ,
.Li 2 ,
.Li 4 ,
or
.Li 8 .
.Pp
.Fa plusy
is the value
.Li y
in the alignment term
.Dq Li xn + y .
It must have a value between
.Li 0
and
.Li 7 ,
inclusive.
.\"
.Ss inet6_option_alloc
This function appends a Hop-by-Hop option or a Destination option
into an ancillary data object that has been initialized by
.Fn inet6_option_init .
This function returns a pointer to the 8-bit
option type field that starts the option on success, or
.Dv NULL
on an error.
.Pp
The difference between this function and
.Fn inet6_option_append
is that the latter copies the contents of a previously built option into
the ancillary data object while the current function returns a
pointer to the space in the data object where the option's TLV must
then be built by the caller.
.Pp
.Fa cmsg
is a pointer to the
.Li cmsghdr
structure that must have been
initialized by
.Fn inet6_option_init .
.Pp
.Fa datalen
is the value of the option data length byte for this option.
This value is required as an argument to allow the function to
determine if padding must be appended at the end of the option.
(The
.Fn inet6_option_append
function does not need a data length argument
since the option data length must already be stored by the caller.)
.Pp
.Fa multx
is the value
.Li x
in the alignment term
.Dq Li xn + y .
It must have a value of
.Li 1 ,
.Li 2 ,
.Li 4 ,
or
.Li 8 .
.Pp
.Fa plusy
is the value
.Li y
in the alignment term
.Dq Li xn + y .
It must have a value between
.Li 0
and
.Li 7 ,
inclusive.
.\"
.Ss inet6_option_next
This function processes the next Hop-by-Hop option or Destination
option in an ancillary data object.
If another option remains to be
processed, the return value of the function is
.Li 0
and
.Fa *tptrp
points to
the 8-bit option type field
(which is followed by the 8-bit option
data length, followed by the option data).
If no more options remain
to be processed, the return value is
.Li -1
and
.Fa *tptrp
is
.Dv NULL .
If an error occurs, the return value is
.Li -1
and
.Fa *tptrp
is not
.Dv NULL .
.Pp
.Fa cmsg
is a pointer to
.Li cmsghdr
structure of which
.Li cmsg_level
equals
.Dv IPPROTO_IPV6
and
.Li cmsg_type
equals either
.Dv IPV6_HOPOPTS
or
.Dv IPV6_DSTOPTS .
.Pp
.Fa tptrp
is a pointer to a pointer to an 8-bit byte and
.Fa *tptrp
is used
by the function to remember its place in the ancillary data object
each time the function is called.
The first time this function is
called for a given ancillary data object,
.Fa *tptrp
must be set to
.Dv NULL .
.Pp
Each time this function returns success,
.Fa *tptrp
points to the 8-bit
option type field for the next option to be processed.
.\"
.Ss inet6_option_find
This function is similar to the previously described
.Fn inet6_option_next
function, except this function lets the caller
specify the option type to be searched for, instead of always
returning the next option in the ancillary data object.
.Fa cmsg
is a
pointer to
.Li cmsghdr
structure of which
.Li cmsg_level
equals
.Dv IPPROTO_IPV6
and
.Li cmsg_type
equals either
.Dv IPV6_HOPOPTS
or
.Dv IPV6_DSTOPTS .
.Pp
.Fa tptrp
is a pointer to a pointer to an 8-bit byte and
.Fa *tptrp
is used
by the function to remember its place in the ancillary data object
each time the function is called.
The first time this function is
called for a given ancillary data object,
.Fa *tptrp
must be set to
.Dv NULL .
.Pp
This function starts searching for an option of the specified type
beginning after the value of
.Fa *tptrp .
If an option of the specified
type is located, this function returns
.Li 0
and
.Fa *tptrp
points to the 8-
bit option type field for the option of the specified type.
If an
option of the specified type is not located, the return value is
.Li -1
and
.Fa *tptrp
is
.Dv NULL .
If an error occurs, the return value is
.Li -1
and
.Fa *tptrp
is not
.Dv NULL .
.\"
.Sh EXAMPLES
RFC 2292 gives comprehensive examples in chapter 6.
.\"
.Sh DIAGNOSTICS
.Fn inet6_option_init
and
.Fn inet6_option_append
return
.Li 0
on success or
.Li -1
on an error.
.Pp
.Fn inet6_option_alloc
returns
.Dv NULL
on an error.
.Pp
On errors,
.Fn inet6_option_next
and
.Fn inet6_option_find
return
.Li -1
setting
.Fa *tptrp
to non
.Dv NULL
value.
.\"
.Sh SEE ALSO
.Rs
.%A W. Stevens
.%A M. Thomas
.%T "Advanced Sockets API for IPv6"
.%N RFC 2292
.%D February 1998
.Re
.Rs
.%A S. Deering
.%A R. Hinden
.%T "Internet Protocol, Version 6 (IPv6) Specification"
.%N RFC 2460
.%D December 1998
.Re
.\"
.Sh STANDARDS
The functions
are documented in
.Dq Advanced Sockets API for IPv6
.Pq RFC 2292 .
.\"
.Sh HISTORY
The implementation first appeared in KAME advanced networking kit.
.\"
.Sh BUGS
The text was shamelessly copied from RFC 2292.
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import base OpenBSD repository of MirOS ocvs:HEAD
@
text
@@


1.1.1.2
log
@NI_WITHSCOPEID should be default (standardising process)
@
text
@d1 2
a2 2
.\"	$OpenBSD: inet6_option_space.3,v 1.18 2005/01/11 17:45:41 jaredy Exp $
.\"	$KAME: inet6_option_space.3,v 1.11 2005/01/05 03:00:44 itojun Exp $
d4 2
a5 2
.\" Copyright (C) 2004 WIDE Project.
.\" All rights reserved.
d15 1
a15 1
.\" 3. Neither the name of the project nor the names of its contributors
d19 1
a19 1
.\" THIS SOFTWARE IS PROVIDED BY THE PROJECT AND CONTRIBUTORS ``AS IS'' AND
d22 1
a22 1
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE PROJECT OR CONTRIBUTORS BE LIABLE
d31 1
a31 1
.Dd December 23, 2004
d42 1
a42 1
.Nd IPv6 Hop-by-Hop and Destination Option Manipulation
d45 1
a45 2
.In sys/types.h
.In netinet/in.h
d61 6
a66 9
Manipulating and parsing IPv6's Hop-by-Hop and Destination options is
complicated by the need to properly align and pad data as well as the
need to manipulate ancillary information that is not part of the data
stream.
RFC 2292 defines a set of functions, which are implemented as
part of the Kame libraries, to help developers create, change,
and parse Hop-by-Hop and Destination options.
All of the prototypes
for the option functions are defined in the
d68 1
a68 1
header file.
a70 2
In order to determine the amount of space necessary to hold any option
the
d72 2
a73 3
function is called.
It returns the number of bytes required to hold
an option when it is stored as ancillary data, including the
d75 9
a83 5
structure at the beginning, and any necessary padding at the end.
The
.Fa nbytes
argument indicates the size of the structure defining the option,
and must include any pad bytes at the beginning (the value
d86 2
a87 1
.Dq Li "xn + y" ) ,
d91 2
a92 3
object, which is the recommended technique, the
.Fn inet6_option_space
function overestimates the amount of space required by the size of
d95 2
a96 1
structures, where
d99 4
a102 3
Usually this has
no impact because it is assumed that most Hop-by-Hop and Destination
option headers carry only one option as indicated in appendix B of RFC 2460.
a104 1
The
d106 2
a107 2
function is called to initialize any ancillary data object that will contain
a Hop-by-Hop or Destination option.
d110 3
a112 3
on success and
.Li \-1
when an error occurs.
a113 1
The
d115 4
a118 3
argument points to a previously allocated area of memory which must be
large enough to contain all the arguments that the application intends
to add later via the
d121 1
a121 2
.Fn inet6_option_alloc
routines.
a122 1
The
d124 1
a124 1
argument is a pointer to a pointer to a
a126 1
The
d128 1
a128 2
argument
points to a
d130 1
a130 2
structure which is constructed by this function and stored in the
area of memory pointed to by
a132 1
The
d137 4
a140 2
.Dv IPV6_DSTOPTS
and is stored in the
d144 2
a145 1
structure mentioned above.
d148 2
a149 2
This function appends a Hop-by-Hop option or a Destination option into
an ancillary data object previously initialized by a call to
d151 1
a151 3
The
.Fn inet6_option_append
function returns
d154 2
a155 2
.Li \-1
when an error occurs.
a156 1
The
d158 1
a158 1
argument is a pointer to the
d160 2
a161 1
structure that was initialized by a call to
a163 6
The
.Fa typep
argument is a pointer to the 8-bit option type.
All options are
encoded as type-length-value tuples and it is assumed that
the
d165 2
d168 5
a172 1
which is then followed by the option data.
d174 6
a179 1
The option types of
d187 2
a188 6
options respectively.
All other values from
.Li 2
through
.Li 255
are available for applications to use.
d190 1
a190 2
The option data length, since it is stored in 8 bites, must have a
value between
d194 1
a194 1
inclusive.
a195 1
The
a196 1
argument
d200 2
a201 3
.Dq Li xn + y
and indicates the byte alignment necessary for the data.
Alignments may be specified as
d206 1
a206 3
.Li 8
bytes, which is no alignment, 16-bit, 32-bit and 64-bit alignments
respectively.
a207 1
The
a208 1
argument
d212 2
a213 2
.Dq Li xn + y
and must have a value between
d217 1
a217 2
inclusive, indicating the amount of padding that is necessary for an
option.
d220 2
a221 4
The
.Fn inet6_option_alloc
function appends a Hop-by-Hop option or a Destination option into an
ancillary data object that has previously been initialized by a call to
d223 2
a224 6
A successful call to the
.Fn inet6_option_alloc
function returns a pointer to the 8-bit option type field,
which is at the beginning of the allocated region.
.Fn inet6_option_alloc
returns
d226 1
a226 1
when an error has occurred.
d228 1
a228 3
The difference between the
.Fn inet6_option_alloc
and
d230 4
a233 4
functions is that the latter copies the contents of a previously built
option into the ancillary data object while the former returns a
pointer to the place in the data object where the option's TLV must
then be built by the application.
a234 1
The
d236 1
a236 1
argument is a pointer to a
d238 2
a239 1
structure that was initialized by
a241 1
The
d243 1
a243 1
argument is the value of the option data length byte for this option.
a250 1
The
d252 18
d271 2
a272 5
.Fa plusy
arguments
are identical to the arguments of the same name described in the
.Fn inet6_option_init
function above.
d275 4
a278 8
The
.Fn inet6_option_next
function is used to process Hop-by-Hop and Destination options that
are present in an ancillary data object.
When an option remains to
be processed, the return value of the
.Fn inet6_option_next
function is
d280 1
a280 1
and the
d282 7
a288 5
argument points to the 8-bit option type field, which is followed by
the 8-bit option data length, and then the option data.
When no more
options remain to be processed, the return value is
.Li \-1
d293 3
a295 3
When an error occurs, the return value is
.Li \-1 ,
but the
d297 1
a297 1
argument is not
a298 3
This set of return values allows a program to easily loop through all
the options in an ancillary data object, checking for the error and
end of stream conditions along the way.
a299 1
When a valid option is returned, the
d301 1
a301 1
argument points to a
d303 1
a303 1
where the
d305 1
a305 1
element equals
d307 1
a307 1
and the
d309 1
a309 1
element is either
a313 1
The
d315 1
a315 1
argument is a pointer to a pointer to an 8-bit byte and
d317 5
a321 5
is used by the function to remember its place in the ancillary data
object each time the function is called.
When the
.Fn inet6_option_next
function is called for the first time on a given ancillary data object,
d326 1
a326 2
Each time the function returns success,
the
d328 2
a329 2
argument points to the 8-bit option type field for the next option to
be processed.
d332 5
a336 5
The
.Fn inet6_option_find
function allows an application to search for a particular option type
in an ancillary data object.
The
d338 2
a339 1
argument is a pointer to a
d341 1
a341 1
structure in which the
d343 1
a343 1
element equals
d345 1
a345 1
and the
d347 1
a347 1
element is either
a351 1
The
d353 10
a362 3
argument is handled exactly as in the
.Fn inet6_option_next
function described above.
d364 1
a364 3
The
.Fn inet6_option_find
function starts searching for an option of the specified type
d367 20
a391 1
The
d395 1
a395 1
functions return
d398 1
a398 1
.Li \-1
a400 1
The
d402 1
a402 1
function returns
d406 1
a406 1
When
d408 1
a408 1
or
d410 2
a411 2
detect an error they return
.Li \-1 ,
d414 1
a414 1
to a non
a418 2
.Xr inet6 4 ,
.Xr ip6 4
d435 2
a436 1
The functions are documented in
d438 1
a438 1
(RFC 2292).
d441 1
a441 1
This implementation first appeared in the KAME advanced networking kit.
d443 2
@

