head	1.3;
access;
symbols
	cvs-200501070130:1.1.5.1 TNF:1.1.5;
locks; strict;
comment	@# @;


1.3
date	2005.01.16.18.08.04;	author tg;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.07.01.45.29;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.07.01.32.12;	author tg;	state Exp;
branches
	1.1.5.1;
next	;

1.1.5.1
date	2005.01.07.01.32.12;	author tg;	state Exp;
branches;
next	;


desc
@@


1.3
log
@crti.o must be compiled with -fno-unit-at-a-time because
gcc 3.4 by default re-orders top-level blocks and statements,
so that our asm statements for .init and .fini ended up in
a totally different location than you'd have expected.

In the future, this will be a .S file, probably. Mixing C
and asm in one source file is hereby declared evil and AT&T.
@
text
@# $MirBSD: src/lib/csu/common_elf/Makefile.inc,v 1.2 2005/01/07 01:45:29 tg Exp $
# $NetBSD: Makefile.inc,v 1.23 2003/03/19 16:54:25 ross Exp $

.include <bsd.own.mk>

.if !defined(ELFSIZE) || empty(ELFSIZE)
ELFSIZE=	32
.endif

CFLAGS+=	-fno-omit-frame-pointer -fno-stack-protector
CPPFLAGS+=	-I${.CURDIR}/../common_elf
CPPFLAGS+=	-DELFSIZE=${ELFSIZE}
#CPPFLAGS+=	-DDYNAMIC -I${BSDSRCDIR}/libexec/ld.so
#CPPFLAGS+=	-I${BSDSRCDIR}/lib/libc/dlfcn
CPPFLAGS+=	-DDWARF2_EH
#CPPFLAGS+=	-DJCR
#CPPFLAGS+=	-DDSO_HANDLE
SHARED_FLAGS+=	-DSHARED -DPIC ${PICFLAG}

# Don't reorder top-level statements and blocks
CFLAGS_crti.o=	-fno-unit-at-a-time

.PATH:		${.CURDIR}/../common_elf

SRCS+=		crt0.c crti.c
OBJS+=		crt0.o crti.o
# if profiling
#OBJS+=		gcrt0.o
.ifndef __NO_CRTN
SRCS+=		crtn.c
OBJS+=		crtn.o
.endif

# If using an external toolchain, we expect crtbegin/crtend to be
# supplied by that toolchain's run-time support.
GCC3_EXT_TOOLCHAIN?=no
.if ${GCC3_EXT_TOOLCHAIN:L} != "yes"
SRCS+=		crtbegin.c crtend.c
OBJS+=		crtbegin.o crtend.o
.  if !defined(NOPIC) || ${NOPIC:L} == "no"
OBJS+=		crtbeginS.o crtendS.o
.  endif
.endif

all: ${OBJS}

crt0.o: crt0.c
	${COMPILE.c} -DCRT0 ${.IMPSRC} -o ${.TARGET}.o
	${LD} -x -r -o ${.TARGET} ${.TARGET}.o
	@@rm -f ${.TARGET}.o

gcrt0.o: crt0.c
	${COMPILE.c} -DMCRT0 ${.ALLSRC} -o ${.TARGET}.o
	${LD} -x -r -o ${.TARGET} ${.TARGET}.o
	@@rm -f ${.TARGET}.o

crti.o: crti.c
	# Don't reorder top-level statements and blocks
	${COMPILE.c} ${.IMPSRC} -o ${.TARGET}.o -fno-unit-at-a-time
	${LD} -X -r -o ${.TARGET} ${.TARGET}.o
	@@rm -f ${.TARGET}.o

crtn.o: crtn.c
	${COMPILE.c} ${.IMPSRC} -o ${.TARGET}.o
	${LD} -X -r -o ${.TARGET} ${.TARGET}.o
	@@rm -f ${.TARGET}.o

crtbegin.o: crtbegin.c
	${COMPILE.c} ${.IMPSRC} -o ${.TARGET}.o
	${LD} -X -r -o ${.TARGET} ${.TARGET}.o
	@@rm -f ${.TARGET}.o

crtbeginS.o: crtbegin.c
	${COMPILE.c} ${SHARED_FLAGS} ${.ALLSRC} -o ${.TARGET}.o
	${LD} -X -r -o ${.TARGET} ${.TARGET}.o
	@@rm -f ${.TARGET}.o

crtend.o: crtend.c
	${COMPILE.c} ${.IMPSRC} -o ${.TARGET}.o
	${LD} -X -r -o ${.TARGET} ${.TARGET}.o
	@@rm -f ${.TARGET}.o

crtendS.o: crtend.c
	${COMPILE.c} ${SHARED_FLAGS} ${.ALLSRC} -o ${.TARGET}.o
	${LD} -X -r -o ${.TARGET} ${.TARGET}.o
	@@rm -f ${.TARGET}.o

realinstall:
	${INSTALL} ${INSTALL_COPY} -o ${BINOWN} -g ${BINGRP} \
	    -m ${NONBINMODE} ${OBJS} ${DESTDIR}/usr/lib/

.include <bsd.prog.mk>
@


1.2
log
@merge and style
@
text
@d1 1
a1 1
# $MirBSD: src/lib/csu/common_elf/Makefile.inc,v 1.9.2.1 2004/12/28 11:10:34 tg Exp $
d20 3
d58 2
a59 1
	${COMPILE.c} ${.IMPSRC} -o ${.TARGET}.o
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
#	$NetBSD: Makefile.inc,v 1.25 2004/08/28 00:18:38 thorpej Exp $
d6 2
a7 2
.if !defined(ELFSIZE)
ELFSIZE=32
d10 1
a10 4
.include "../../Makefile.inc"

CPPFLAGS+=	-DLIBC_SCCS -DPIC -DDYNAMIC -DELFSIZE=${ELFSIZE}
CPPFLAGS+=	-I${NETBSDSRCDIR}/libexec/ld.elf_so
d12 3
a14 1
CPPFLAGS+=	-I${NETBSDSRCDIR}/lib/libc/dlfcn
d16 3
a18 2
CPPFLAGS+=	-DJCR
CPPFLAGS+=	-DDSO_HANDLE
d22 7
a28 4
SRCS+=		crt0.c crti.c crtn.c
OBJS+=		crt0.o gcrt0.o crti.o crtn.o
.if ${MKPIC} != "no"
COPTS+=		-fPIC
d31 4
a34 4
# We supply crtbegin / crtend *ONLY* if using the old in-tree GCC 2.95.3!
# In all other cases (including use of an external toolchain), these will
# be provided by that toolchain's run-time support.
.if ${USE_TOOLS_TOOLCHAIN} == "yes" && !defined(EXTERNAL_TOOLCHAIN)
d37 1
a37 2
.if ${MKPIC} != "no"
SRCS+=		crtbeginS.c crtendS.c
d39 1
a39 1
.endif
d42 1
a42 1
realall: ${OBJS}
d45 2
a46 3
	@@echo "${COMPILE.c} -DCRT0 ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.c} -DCRT0 ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -x -r -o ${.TARGET} ${.TARGET}.o
d49 3
a51 5
# dependant on crt0.o to pick up header dependencies
gcrt0.o: ${.CURDIR}/crt0.c crt0.o
	@@echo "${COMPILE.c} -DMCRT0 ${.CURDIR}/crt0.c -o ${.TARGET}"
	@@${COMPILE.c} -DMCRT0 ${.CURDIR}/crt0.c -o ${.TARGET}.o
	@@${LD} -x -r -o ${.TARGET} ${.TARGET}.o
d55 2
a56 3
	@@echo "${COMPILE.c} ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.c} ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -X -r -o ${.TARGET} ${.TARGET}.o
d60 2
a61 3
	@@echo "${COMPILE.c} ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.c} ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -X -r -o ${.TARGET} ${.TARGET}.o
a63 1
.if ${USE_TOOLS_TOOLCHAIN} == "yes" && !defined(EXTERNAL_TOOLCHAIN)
d65 2
a66 3
	@@echo "${COMPILE.c} ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.c} ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -X -r -o ${.TARGET} ${.TARGET}.o
d69 3
a71 4
crtbeginS.o: crtbeginS.c
	@@echo "${COMPILE.c} -DSHARED ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.c} -DSHARED ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -X -r -o ${.TARGET} ${.TARGET}.o
d75 2
a76 3
	@@echo "${COMPILE.c} ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.c} ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -X -r -o ${.TARGET} ${.TARGET}.o
d79 3
a81 4
crtendS.o: crtendS.c
	@@echo "${COMPILE.c} -DSHARED ${.IMPSRC} -o ${.TARGET}"
	@@${COMPILE.c} -DSHARED ${.IMPSRC} -o ${.TARGET}.o
	@@${LD} -X -r -o ${.TARGET} ${.TARGET}.o
a82 1
.endif	# USE_TOOLS_TOOLCHAIN == "yes" && ! EXTERNAL_TOOLCHAIN
d84 3
a86 2
FILES=${OBJS}
FILESDIR=${LIBDIR}
@


1.1.5.1
log
@tnf's csu
@
text
@@
