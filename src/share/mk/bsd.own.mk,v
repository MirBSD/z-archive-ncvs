head	2.7;
access;
symbols
	start:1.1.1.1 openbsd:1.1.1;
locks; strict;
comment	@# @;


2.7
date	2005.01.20.18.17.57;	author tg;	state Exp;
branches;
next	2.6;

2.6
date	2005.01.18.17.30.33;	author tg;	state Exp;
branches;
next	2.5;

2.5
date	2005.01.16.18.18.52;	author tg;	state Exp;
branches;
next	2.4;

2.4
date	2005.01.14.14.15.20;	author tg;	state Exp;
branches;
next	2.3;

2.3
date	2005.01.09.19.36.57;	author tg;	state Exp;
branches;
next	2.2;

2.2
date	2005.01.05.05.05.29;	author tg;	state Exp;
branches;
next	2.1;

2.1
date	2005.01.03.16.33.53;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.12.21.32.04;	author tg;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.12.21.32.04;	author tg;	state Exp;
branches;
next	;


desc
@@


2.7
log
@if in DESTDIR builds, mark CSU files as .OPTIONAL
because our linking process pulls them in from /usr/lib anyway
(or so I think)

I'd rather have used them from ${DESTDIR}/usr/lib but not only
the names but too the number (ncrt{i,n}.o on mirppc, crtn.o on
all others) and path (${DESTDIR}/../gcc/usr/lib/crtbegin.o and
its friends, during make b-r) vary.
XXX This is probably what we want anyway
(but then, releases are built twice and in a chroot anyway)
@
text
@# $MirBSD: src/share/mk/bsd.own.mk,v 2.6 2005/01/18 17:30:33 tg Exp $
# $OpenBSD: bsd.own.mk,v 1.88 2004/09/06 06:38:02 deraadt Exp $
# $NetBSD: bsd.own.mk,v 1.24 1996/04/13 02:08:09 thorpej Exp $
#-
# Copyright (c) 2002, 2003, 2004, 2005
#	Thorsten "mirabile" Glaser <tg@@66h.42h.de>
#
# Licensee is hereby permitted to deal in this work without restric-
# tion, including unlimited rights to use, publicly perform, modify,
# merge, distribute, sell, give away or sublicence, provided all co-
# pyright notices above, these terms and the disclaimer are retained
# in all redistributions or reproduced in accompanying documentation
# or other materials provided with binary redistributions.
#
# Licensor hereby provides this work "AS IS" and WITHOUT WARRANTY of
# any kind, expressed or implied, to the maximum extent permitted by
# applicable law, but with the warranty of being written without ma-
# licious intent or gross negligence; in no event shall licensor, an
# author or contributor be held liable for any damage, direct, indi-
# rect or other, however caused, arising in any way out of the usage
# of this work, even if advised of the possibility of such damage.
#-
# Sort of central configuration Makefile include (someone has a bet-
# ter description as to which purpose this file has?).

.if !defined(BSD_OWN_MK)
BSD_OWN_MK=1

# Host-specific overrides
.if defined(MAKECONF) && exists(${MAKECONF})
.  include "${MAKECONF}"
.elif exists(/etc/mk.conf)
.  include "/etc/mk.conf"
.endif


CROSS_MODE?=	No
.if make(obj)
CROSS_MODE:=	No
.endif
.if ${CROSS_MODE:L} == "yes"
DEFFLAGS=	No
EXPERIMENTAL=	Yes
.endif	# CROSS_MODE

# Automatic CC/COPTS assignment system
DEFFLAGS?=	Yes

.if ${DEFFLAGS:L} != "no"
CC?=		mgcc
COPTS?=		${DEFCOPTS} ${GCEXTRA}
.endif	# DEFFLAGS

.if ${MACHINE} == "macppc"
CRTN?=		${DESTDIR}/usr/lib/ncrtn.o
.endif

# crtbegin.o/crtend.o from gcc3 (yes) or src/lib/csu (no)?
GCC3_EXT_TOOLCHAIN?=	Yes
# Set 'WARNINGS' to 'yes' to add appropriate warnings to each compilation
WARNINGS?=		No
# Set 'SKEY' to 'yes' to build with support for S/key authentication.
SKEY?=			Yes
# Set 'TCP_WRAPPERS' to 'yes' to build certain networking daemons with
# integrated support for libwrap.
TCP_WRAPPERS?=		No
# Set 'DEBUGLIBS' to 'yes' to build libraries with debugging symbols
# currently broken
DEBUGLIBS?=		No
# Ignore USA-only patents for build (by default, build it, MirOS is EU not US)
MKC_USAP?=		No
# Set 'SUDO' to 'sudo' to build releases, packages etc. as user
SUDO?=
# where the system object and source trees are kept; can be configurable
# by the user in case they want them in ~/foosrc and ~/fooobj, for example
BSDSRCDIR?=		/usr/src
BSDOBJDIR?=		/usr/obj
BSDRELDIR?=		/usr/releng
PORTSDIR?=		/usr/ports
# Shared files for system gnu configure
GNUSYSTEM_AUX_DIR?=	${BSDSRCDIR}/gnu/share


BINGRP?=	bin
BINOWN?=	root
BINMODE?=	555
NONBINMODE?=	444
DIRMODE?=	755

SHAREDIR?=	/usr/share
SHAREGRP?=	bin
SHAREOWN?=	root
SHAREMODE?=	${NONBINMODE}

MANDIR?=	/usr/share/man/cat
MANGRP?=	bin
MANOWN?=	root
MANMODE?=	${NONBINMODE}

LIBDIR?=	/usr/lib
LINTLIBDIR?=	/usr/libdata/lint
LIBGRP?=	${BINGRP}
LIBOWN?=	${BINOWN}
LIBMODE?=	${NONBINMODE}

DOCDIR?=	/usr/share/doc
DOCGRP?=	bin
DOCOWN?=	root
DOCMODE?=	${NONBINMODE}

LKMDIR?=	/usr/lkm
LKMGRP?=	${BINGRP}
LKMOWN?=	${BINOWN}
LKMMODE?=	${NONBINMODE}

INSTALL_COPY?=	-c
.ifndef	DEBUG
INSTALL_STRIP?=	-s
.else
INSTALL_STRIP?=
.endif

# This may be changed for _single filesystem_ configurations (such as
# routers and other embedded systems); normal systems should leave it alone!
STATIC?=	-static

# Define SYS_INCLUDE to indicate whether you want symbolic links to the system
# source (''symlinks''), or a separate copy (''copies''); (latter useful
# in environments where it's not possible to keep /sys publicly readable)
SYS_INCLUDE?=	copies

# don't try to generate PIC versions of libraries on machines
# which don't support PIC.
#.if (${MACHINE_ARCH} == "vax") || (${MACHINE_ARCH} == "m88k")
#NOPIC=		yes
#.endif

NOLINT?=	yes
NOMAN?=		no
NOOBJ?=		no
NOPIC?=		no

LDFLAGS?=
.if ${NOPIC:L} != "no" && !${LDFLAGS:M-static}
LDFLAGS+=	${STATIC}
.endif

# MirOS is always ELF for now, although the possible choices
# are: ELF a.out COFF Mach-O PE (consistent with nbsd)
OBJECT_FMT=	ELF

# PIC relocation flags.
#.if ${MACHINE_ARCH} == "sparc64"
#PICFLAG=	-fPIC
#.else
PICFLAG=	-fpic
#.  if ${MACHINE_ARCH} == "m68k"
# Function CSE makes gas -k not recognize external function calls as lazily
# resolvable symbols, thus sometimes making ld.so report undefined symbol
# errors on symbols found in shared library members that would never be
# called.  Ask niklas@@openbsd.org for details.
#PICFLAG+=-fno-function-cse
#.  endif
#.endif

.if ${MACHINE_ARCH} == "sparc"
ASPICFLAG=	-KPIC
#.elif ${OBJECT_FMT:L} == "aout"
#ASPICFLAG=	-k
.endif

# XXX fixme
PIC?=		cat --
BIB?=		cat --

BIB?=		bib
EQN?=		neqn
GREMLIN?=	grn
GRIND?=		vgrind -f
INDXBIB?=	indxbib
MKSH?=		/bin/ksh
NROFF?=		nrcon ${MACROS} ${PAGES}
PIC?=		pic
REFER?=		refer
ROFF?=		groff -Tps -M/usr/share/tmac ${MACROS} ${PAGES}
SOELIM?=	soelim
TBL?=		tbl

# this used to be in <bsd.prog.mk> but we need it
# e.g. for depending DLLs on CSU objects

.if ${OBJECT_FMT:U} == "ELF"
CRTBEGIN?=	${DESTDIR}/usr/lib/crtbegin.o
CRTEND?=	${DESTDIR}/usr/lib/crtend.o
CRTI?=		${DESTDIR}/usr/lib/crti.o
CRTN?=		${DESTDIR}/usr/lib/crtn.o
.  if defined(DESTDIR)
${CRTBEGIN} ${CRTEND} ${CRTI} ${CRTN}: .OPTIONAL
.  endif
.endif

LIBCRT0?=	${DESTDIR}/usr/lib/crt0.o
LIBC?=		${DESTDIR}/usr/lib/libc.a
LIBCDK?=	${DESTDIR}/usr/lib/libcdk.a
LIBCOMPAT?=	${DESTDIR}/usr/lib/libcompat.a
LIBCRYPTO?=	${DESTDIR}/usr/lib/libcrypto.a
LIBCURSES?=	${DESTDIR}/usr/lib/libcurses.a
LIBDES?=	${DESTDIR}/usr/lib/libdes.a
LIBEDIT?=	${DESTDIR}/usr/lib/libedit.a
LIBEVENT?=	${DESTDIR}/usr/lib/libevent.a
LIBEXPAT?=	${DESTDIR}/usr/lib/libexpat.a
LIBF2C?=	${DESTDIR}/usr/lib/libg2c.a
LIBFL?=		${DESTDIR}/usr/lib/libfl.a
LIBFORM?=	${DESTDIR}/usr/lib/libform.a
LIBFRTBEGIN?=	${DESTDIR}/usr/lib/libfrtbegin.a
LIBG2C?=	${DESTDIR}/usr/lib/libg2c.a
LIBGCC?=	${DESTDIR}/usr/lib/libgcc.a
LIBGPC?=	${DESTDIR}/usr/lib/libgpc.a
LIBKEYNOTE?=	${DESTDIR}/usr/lib/libkeynote.a
LIBKVM?=	${DESTDIR}/usr/lib/libkvm.a
LIBL?=		${DESTDIR}/usr/lib/libl.a
LIBM?=		${DESTDIR}/usr/lib/libm.a
LIBMENU?=	${DESTDIR}/usr/lib/libmenu.a
LIBMILTER?=	${DESTDIR}/usr/lib/libmilter.a
LIBOBJC?=	${DESTDIR}/usr/lib/libobjc.a
LIBOLDCURSES?=	${DESTDIR}/usr/lib/libocurses.a
LIBPANEL?=	${DESTDIR}/usr/lib/libpanel.a
LIBPCAP?=	${DESTDIR}/usr/lib/libpcap.a
LIBPERL?=	${DESTDIR}/usr/lib/libperl.a
LIBPNG?=	${DESTDIR}/usr/lib/libpng.a
LIBRPCSVC?=	${DESTDIR}/usr/lib/librpcsvc.a
LIBRX?=		${DESTDIR}/usr/lib/librx.a
LIBSECTOK?=	${DESTDIR}/usr/lib/libsectok.a
LIBSKEY?=	${DESTDIR}/usr/lib/libskey.a
LIBSSL?=	${DESTDIR}/usr/lib/libssl.a
LIBTERMCAP?=	${DESTDIR}/usr/lib/libtermcap.a
LIBTERMLIB?=	${DESTDIR}/usr/lib/libtermlib.a
LIBUSB?=	${DESTDIR}/usr/lib/libusbhid.a
LIBUTIL?=	${DESTDIR}/usr/lib/libutil.a
LIBWRAP?=	${DESTDIR}/usr/lib/libwrap.a
LIBY?=		${DESTDIR}/usr/lib/liby.a
LIBZ?=		${DESTDIR}/usr/lib/libz.a

.if (${MACHINE_ARCH} == "alpha" || ${MACHINE_ARCH} == "amd64" || \
     ${MACHINE_ARCH} == "i386")
LIBARCH?=	${DESTDIR}/usr/lib/lib${MACHINE_ARCH}.a
.else
LIBARCH?=
.endif

# old stuff
LIBOSSAUDIO?=	${DESTDIR}/usr/lib/libossaudio.a
LIBOTERMCAP?=	${DESTDIR}/usr/lib/libotermcap.a
LIBRESOLV?=	${DESTDIR}/usr/lib/libresolv.a

.PHONY: spell clean cleandir obj manpages print all \
	depend beforedepend afterdepend cleandepend \
	all lint cleanman includes \
	beforeinstall realinstall maninstall afterinstall install

.endif
@


2.6
log
@devise of some evil ways to use /usr/releng
@
text
@d1 1
a1 1
# $MirBSD: src/share/mk/bsd.own.mk,v 2.5 2005/01/16 18:18:52 tg Exp $
d197 3
@


2.5
log
@move dependency info to <bsd.own.mk>
so it's pulled in early enough for the
dep rules in <bsd.lib.mk> to work
@
text
@d1 1
a1 1
# $MirBSD: src/share/mk/bsd.own.mk,v 2.4 2005/01/14 14:15:20 tg Exp $
d78 1
@


2.4
log
@* protect from multiple inclusion
* switch defaults to be suitable for gcc 3.4
* remove crap
* unify style a bit
@
text
@d1 1
a1 1
# $MirBSD: src/share/mk/bsd.own.mk,v 2.3 2005/01/09 19:36:57 tg Exp $
d188 64
@


2.3
log
@merge over most userland fixes from ocvs
@
text
@d1 1
a1 1
# $MirBSD: src/share/misc/licence.template,v 1.20 2004/12/03 16:18:37 tg Rel $
d26 2
a27 1
.ifndef	BSD_OWN_MK
a36 11
# Calculate machine capabilities
.ifndef	MACHINE
# uh oh. trouble.
DEFFLAGS=	No
.elif ${MACHINE} == "i386"
HAS_GCC3=	Yes
.else
DEFFLAGS=	No
.endif


a42 1
HOSTCC?=	gcc
d50 1
a50 2

CC?=		gcc
d52 1
a52 1
HOSTCC?=	${CC}
d54 3
a56 1
.endif	# DEFFLAGS
d68 1
a187 4
.if ${MACHINE} == "macppc"
CRTN?=		${DESTDIR}/usr/lib/ncrtn.o
.endif

a192 1
BSD_OWN_MK=done
@


2.2
log
@oups
allow user overriding
@
text
@d1 1
a1 1
# $MirBSD: src/share/mk/bsd.own.mk,v 2.1 2005/01/03 16:33:53 tg Exp $
d5 1
a5 1
# Copyright (c) 2002, 2003, 2004
d9 5
a13 5
# tion, including unlimited rights to use, publically perform, modi-
# fy, merge, distribute, sell, give away or sublicence, provided the
# above copyright notices, these terms and the disclaimer are retai-
# ned in all redistributions, or reproduced in accompanying documen-
# tation or other materials provided with binary redistributions.
d21 1
a21 1
# of covered work, even if advised of the possibility of such damage.
d48 3
d54 1
d174 2
a175 2
#.if (${MACHINE_ARCH} == "sparc64") || (${MACHINE_ARCH} == "sparc")
#ASPICFLAG=	-KPIC
d178 1
a178 1
#.endif
d197 4
@


2.1
log
@work over most of the changes MirOS has done, and add
the new or copied/moved files
@
text
@d1 1
a1 1
# $MirBSD: src/share/mk/bsd.own.mk,v 1.66 2004/11/30 17:05:20 tg Exp $
d50 1
a50 1
HOSTCC=		gcc
d58 1
a58 1
CC=		gcc
d60 1
a60 1
HOSTCC=		${CC}
@


1.1
log
@Initial revision
@
text
@d1 26
a26 2
#	$OpenBSD: bsd.own.mk,v 1.84 2004/06/22 19:50:01 pvalchev Exp $
#	$NetBSD: bsd.own.mk,v 1.24 1996/04/13 02:08:09 thorpej Exp $
d30 1
a30 1
.include "${MAKECONF}"
d32 1
a32 1
.include "/etc/mk.conf"
d35 7
a41 19
# Set `WARNINGS' to `yes' to add appropriate warnings to each compilation
WARNINGS?=	no
# Set `SKEY' to `yes' to build with support for S/key authentication.
SKEY?=		yes
# Set `KERBEROS5' to `yes' to build with support for Kerberos5 authentication.
KERBEROS5?=	yes
# Set `YP' to `yes' to build with support for NIS/YP.
YP?=		yes
# Set `TCP_WRAPPERS' to `yes' to build certain networking daemons with
# integrated support for libwrap.
TCP_WRAPPERS?=	yes
# Set `AFS` to `yes' to build with AFS support.
AFS?=		yes
# Set `DEBUGLIBS' to `yes' to build libraries with debugging symbols
DEBUGLIBS?=	no
# Set toolchain to be able to know differences.
.if ${MACHINE_ARCH} == "m68k" || ${MACHINE_ARCH} == "m88k" || \
    ${MACHINE_ARCH} == "vax"
ELF_TOOLCHAIN?=	no
d43 1
a43 1
ELF_TOOLCHAIN?=	yes
a45 8
# do the dew
.if ${MACHINE} == "amd64" || (${MACHINE_ARCH} == "arm" || \
    ${MACHINE_ARCH} == "hppa" || ${MACHINE_ARCH} == "hppa64" || \
    ${MACHINE_ARCH} == "sparc64" || ${MACHINE_ARCH} == "x86_64")
USE_GCC3?=yes
.else
USE_GCC3?=no
.endif
d47 32
d81 6
a86 2
BSDSRCDIR?=	/usr/src
BSDOBJDIR?=	/usr/obj
a93 6
# Define MANZ to have the man pages compressed (gzip)
#MANZ=		1

# Define MANPS to have PostScript manual pages generated
#MANPS=		1

a103 5
PSDIR?=		/usr/share/man/ps
PSGRP?=		bin
PSOWN?=		root
PSMODE?=	${NONBINMODE}

d110 1
a110 1
DOCDIR?=        /usr/share/doc
d113 1
a113 1
DOCMODE?=       ${NONBINMODE}
a119 8
NLSDIR?=	/usr/share/nls
NLSGRP?=	bin
NLSOWN?=	root
NLSMODE?=	${NONBINMODE}

# Shared files for system gnu configure, not used yet
GNUSYSTEM_AUX_DIR?=${BSDSRCDIR}/share/gnu

d121 1
a121 1
.ifndef DEBUG
d123 2
d132 1
a132 1
# source (``symlinks''), or a separate copy (``copies''); (latter useful
d134 1
a134 1
#SYS_INCLUDE= 	symlinks
d138 24
a161 10
.if (${MACHINE_ARCH} == "vax") || (${MACHINE_ARCH} == "m88k")
NOPIC=
.endif

# pic relocation flags.
.if (${MACHINE_ARCH} == "sparc64")
PICFLAG=-fPIC
.else
PICFLAG=-fpic
. if ${MACHINE_ARCH} == "m68k"
d166 26
a191 22
PICFLAG+=-fno-function-cse
. endif
.endif

.if (${MACHINE_ARCH} == "sparc64") || (${MACHINE_ARCH} == "sparc")
ASPICFLAG=-KPIC
.elif (${ELF_TOOLCHAIN:L} == "no")
ASPICFLAG=-k
.endif

# don't try to generate PROFILED versions of libraries on machines
# which don't support profiling.
# to add this back use the following line
.if (${MACHINE_ARCH} == "m88k")
#.if 0
NOPROFILE=
.endif

# No lint, for now.
NOLINT=

BSD_OWN_MK=Done
d195 1
a195 1
	all lint cleanman nlsinstall cleannls includes \
d197 3
@


1.1.1.1
log
@Import base OpenBSD repository of MirOS ocvs:HEAD
@
text
@@
