head	2.2;
access;
symbols
	mksh-R19:2.1
	cvs-200412101800:1.1.15.1
	mirbsd:1.1.15;
locks; strict;
comment	@# @;


2.2
date	2004.12.13.17.33.35;	author tg;	state dead;
branches;
next	2.1;

2.1
date	2004.12.10.18.09.40;	author tg;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.10.18.08.08;	author tg;	state Exp;
branches
	1.1.15.1;
next	;

1.1.15.1
date	2004.12.10.18.08.08;	author tg;	state Exp;
branches;
next	;


desc
@@


2.2
log
@shrink a bit
@
text
@$MirBSD: src/bin/ksh/PROJECTS,v 2.1 2004/12/10 18:09:40 tg Exp $
$OpenBSD: PROJECTS,v 1.5 1999/07/14 13:37:23 millert Exp $


Wouldn't it be nice to:
 * have 64 bit signed arithmetic in mirbsdksh expressions?


Things to be done in pdksh (see also the NOTES file):

    * builtin utilities:
      pdksh has most if not all POSIX/at&t ksh builtins, but they need to
      be checked that they conform to POSIX/at&t manual.  Part of the
      process is changing the builtins to use the ksh_getopt() routine.

      The following builtins, which are defined by POSIX, haven't been
      examined:
	eval

      The first pass has been done on the following commands:
	. : alias bg break cd continue echo exec exit export false fc fg
	getopts jobs kill pwd read readonly return set shift time trap true
	umask unalias unset wait

      The second pass (ie, believed to be completely POSIX) has been done on
      the following commands:
	test

      (ulimit also needs to be examined to check that it fits the posix style)

    * test suite
      Ideally, as the builtin utilities are being POSIXized, short tests
      should be written to be used in regression testing.  The tests
      directory contains some tests, but many more need to be written.

    * trap code
	* add the DEBUG trap.
	* fix up signal handling code.  In particular, fatal vs tty signals,
	  have signal routine to call to check for pending/fatal traps, etc.

    * parsing
	* the time keyword needs to be hacked to accept options (!) since
	  POSIX says it shall accept the -p option and must skip a -- argument
	  (end of options).  Yuck.

    * lexing
      the lexing may need a re-write since it currently doesn't parse $( .. ),
      $(( .. )), (( ... )) properly.
	* need to ignore contents of quoted strings (and escaped chars?)
	  inside $( .. ) and $(( .. )) when counting parentheses.
	* need to put bounds check on states[] array (if it still exists after
	  the re-write)

    * variables
	* The "struct tbl" that is currently used for variables needs work since
          more information (eg, array stuff, fields) are needed for variables
	  but not for the other things that use "struct tbl".
	* Arrays need to be implemented differently: currently does a linear
	  search of a linked list to find element i; the linked list is not
	  freed when a variable is unset.

    * functions
      finish the differences between function x and x(): trap EXIT, traps
      in general, treatment of OPTIND/OPTARG,

    * history
      There are two versions of the history code, COMPLEX_HISTORY and
      EASY_HISTORY, which need to be merged.  COMPLEX does at&t style history
      where the history file is written after each command and checked when
      ever looking through the history (in case another shell has added
      something).  EASY simply reads the history file at startup and writes
      it before exiting.
	* re-write the COMPLEX_HISTORY code so mmap() not needed (currently
	  can't be used on machines without mmap()).
	* Add multiline knowledge to COMPLEX_HISTORY (see EASY_HISTORY
	  stuff).
	* change COMPLEX_HISTORY code so concurrent history files are
	  controlled by an option (set -o history-concurrent?).  Delete
	  the EASY_HISTORY code.
	* bring history code up to POSIX standards (see POSIX description
	  of fc, etc.).

    * documentation
      Some sort of tutorial with examples would be good.  Texinfo is probably
      the best medium for this.

    * miscellaneous
	* POSIX specifies what happens when various kinds of errors occur
	  in special built-ins commands vs regular commands (builtin or
	  otherwise) (see POSIX.2:3.8.1).  Some of this has been taken
	  care of, but more needs doing.

	* remove static limits created by fixed sized arrays
	  (eg, ident[], heres[], PATH, buffer size in emacs/vi code)

	* merge the emacs and vi code (should reduce the size of the shell and
	  make maintenance easier); handle SIGWINCH while editing a line.
	  [John Rochester is working on the merge]

	* add POSIX globbing (eg, [[:alnum:]]), see POSIX.2:2.8.3.2.

	* teach shf_vfprintf() about long long's (%lld); also make %p use
	  long longs if appropriate.
@


2.1
log
@bump to mksh R19
@
text
@d1 1
a1 1
$MirBSD: src/bin/ksh/PROJECTS,v 1.1.15.1 2004/12/10 18:08:08 tg Exp $
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$MirBSD: src/bin/ksh/PROJECTS,v 1.5 2004/11/10 17:13:10 tg Exp $
@


1.1.15.1
log
@Import mirbsdksh-HEAD into new CVS
@
text
@@
